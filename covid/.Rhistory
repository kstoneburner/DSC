ggplot(data = last_month_df, aes(y = daily_total_confirmed, x = daily_total_deaths)) + geom_point(color='blue') +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
#  geom_line(color='blue'  ,data = june_CD_base_predict_df,      aes(y=daily_total_confirmed, x=daily_total_deaths)) +
geom_line(color='red'   ,data = last_month_predict_df, aes(y=daily_total_confirmed, x=daily_total_deaths)) +
geom_line(color='purple'   ,data = last_month_predict_df, aes(y=daily_total_confirmed, x=tested_predict_deaths)) +
scale_fill_discrete(breaks=c("daily_total_deaths","tested_predict_deaths")) +
labs( x="Total Covid Deaths", y="Total Confirmed Cases", subtitle="Modeling deaths",subtitle="Statewide (last 30 days)")
ggplot(data = last_month_df, aes(y = daily_total_confirmed, x = daily_total_deaths)) + geom_point(color='blue') +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
#  geom_line(color='blue'  ,data = june_CD_base_predict_df,      aes(y=daily_total_confirmed, x=daily_total_deaths)) +
geom_line(color='red'   ,data = last_month_predict_df, aes(y=daily_total_confirmed, x=daily_total_deaths)) +
geom_line(color='purple'   ,data = last_month_predict_df, aes(y=daily_total_confirmed, x=tested_predict_deaths)) +
scale_fill_discrete(breaks=c("daily_total_deaths","tested_predict_deaths")) +
labs( x="Total Covid Deaths", y="Total Confirmed Cases", title="Modeling deaths",subtitle="Statewide (last 30 days)")
ggplot(data = last_month_df, aes(y = daily_total_confirmed, x = daily_total_deaths)) + geom_point(color='blue') +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
#  geom_line(color='blue'  ,data = june_CD_base_predict_df,      aes(y=daily_total_confirmed, x=daily_total_deaths)) +
geom_line(color='red'   ,data = last_month_predict_df, aes(y=daily_total_confirmed, x=daily_total_deaths)) +
geom_line(color='purple'   ,data = last_month_predict_df, aes(y=daily_total_confirmed, x=tested_predict_deaths)) +
scale_fill_manual(values=c("#999999", "#E69F00"),
name="Experimental\nCondition",
breaks=c("daily_total_confirmed", "tested_predict_deaths"),
labels=c("Control", "Treatment 1", "Treatment 2"))  labs( x="Total Covid Deaths", y="Total Confirmed Cases", title="Modeling deaths",subtitle="Statewide (last 30 days)")
labels=c("Control", "Treatment 1", ) +
ggplot(data = last_month_df, aes(y = daily_total_confirmed, x = daily_total_deaths)) + geom_point(color='blue') +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
#  geom_line(color='blue'  ,data = june_CD_base_predict_df,      aes(y=daily_total_confirmed, x=daily_total_deaths)) +
geom_line(color='red'   ,data = last_month_predict_df, aes(y=daily_total_confirmed, x=daily_total_deaths)) +
geom_line(color='purple'   ,data = last_month_predict_df, aes(y=daily_total_confirmed, x=tested_predict_deaths)) +
scale_fill_manual(values=c("#999999", "#E69F00"),
name="Experimental\nCondition",
breaks=c("daily_total_confirmed", "tested_predict_deaths"),
labels=c("Control", "Treatment 1", ) ) +
labs( x="Total Covid Deaths", y="Total Confirmed Cases", title="Modeling deaths",subtitle="Statewide (last 30 days)")
ggplot(data = last_month_df, aes(y = daily_total_confirmed, x = daily_total_deaths)) + geom_point(color='blue') +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
#  geom_line(color='blue'  ,data = june_CD_base_predict_df,      aes(y=daily_total_confirmed, x=daily_total_deaths)) +
geom_line(color='red'   ,data = last_month_predict_df, aes(y=daily_total_confirmed, x=daily_total_deaths)) +
geom_line(color='purple'   ,data = last_month_predict_df, aes(y=daily_total_confirmed, x=tested_predict_deaths)) +
scale_fill_manual(values=c("#999999", "#E69F00"),
name="Experimental\nCondition",
breaks=c("daily_total_confirmed", "tested_predict_deaths"),
labels=c("Control", "Treatment 1" ) ) +
labs( x="Total Covid Deaths", y="Total Confirmed Cases", title="Modeling deaths",subtitle="Statewide (last 30 days)")
ggplot(data = last_month_df, aes(y = daily_total_confirmed, x = daily_total_deaths)) + geom_point(color='blue') +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
#  geom_line(color='blue'  ,data = june_CD_base_predict_df,      aes(y=daily_total_confirmed, x=daily_total_deaths)) +
geom_line(color='red'   ,data = last_month_predict_df, aes(y=daily_total_confirmed, x=daily_total_deaths)) +
geom_line(color='purple'   ,data = last_month_predict_df, aes(y=daily_total_confirmed, x=tested_predict_deaths)) +
scale_fill_manual(values=c("#999999", "#E69F00"),
name="Experimental\nCondition",
breaks=c("daily_total_deaths", "tested_predict_deaths"),
labels=c("Control", "Treatment 1" ) ) +
labs( x="Total Covid Deaths", y="Total Confirmed Cases", title="Modeling deaths",subtitle="Statewide (last 30 days)")
ggplot(data = last_month_df, aes(y = daily_total_confirmed, x = daily_total_deaths)) + geom_point(color='blue') +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
#  geom_line(color='blue'  ,data = june_CD_base_predict_df,      aes(y=daily_total_confirmed, x=daily_total_deaths)) +
geom_line(color='red'   ,data = last_month_predict_df, aes(y=daily_total_confirmed, x=daily_total_deaths)) +
geom_line(color='purple'   ,data = last_month_predict_df, aes(y=daily_total_confirmed, x=tested_predict_deaths)) +
labs( x="Total Covid Deaths", y="Total Confirmed Cases", title="Modeling deaths in California (last 30 days)",subtitle="Red: Confirmed predicts deaths\nPurple: Total Tests predict deaths")
ggplot(data = last_month_df, aes(y = daily_total_confirmed, x = daily_total_deaths)) + geom_point(color='blue') +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
#  geom_line(color='blue'  ,data = june_CD_base_predict_df,      aes(y=daily_total_confirmed, x=daily_total_deaths)) +
geom_line(color='red'   ,data = last_month_predict_df, aes(y=daily_total_confirmed, x=daily_total_deaths)) +
geom_line(color='purple'   ,data = last_month_predict_df, aes(y=daily_total_confirmed, x=tested_predict_deaths)) +
labs( x="Total Covid Deaths", y="Total Confirmed Cases", title="Modeling deaths in California (last 30 days)",subtitle="Red: Confirmed predicts deaths\nPurple: Testing predicts deaths")
offset_testing_lm15_df <- build_rolling_lm_offset(offset_testing_df,"daily_total_deaths",15)
build_rolling_lm_offset <- function(input_df,prediction_field,rolling_days){
input_column_offset <- 3
### Find the best offset covariance over a period of rolling days
output_vector <- c()
output_vector2 <- c()
mse_vector <- c()
predicted_deaths <- c()
lm_coefficient <- c()
lm_intercept <- c()
### Loop through input data frame
for (i in 1:nrow(input_df)){
### Skip rows that are less than rolling days. Sorry it can't be helped
if (i <= rolling_days) {
output_vector2 <- append(output_vector2,0)
mse_vector <- append(mse_vector,0)
predicted_deaths <- append(predicted_deaths,0)
lm_coefficient <- append(lm_coefficient,0)
lm_intercept <- append(lm_intercept,0)
next
}
print(paste0("Processing Row: ",i," of ",nrow(input_df)))
#### Build a temprory data frame, using current row index - minus the rolling days
temp_df <- input_df[(i - rolling_days):i,2:length(input_df)]
least_residual <- -1
least_offset <- ""
least_lm <- ""
least_predict_df <- ""
### Build Residuals for each offset Column
### Loop through each offset column
for (lmCount in input_column_offset:length(temp_df)){
### Build a linear model for each offset
### Choose the model with the lowest error
### Get Each offset column name for Linear model
loopColName <- colnames(temp_df)[lmCount]
### dynamically build Linear Model
eval(parse(text=paste0("temp_lm <-  lm(",prediction_field," ~ ",loopColName,", data=temp_df)")))
temp_predict_df <- data.frame(
daily_total_deaths = predict(temp_lm, newdata=temp_df),
daily_total_confirmed=temp_df[loopColName])
temp_residual <- temp_df$daily_total_deaths - temp_predict_df$daily_total_deaths
### Base Error
temp_residual <- sum(temp_residual^2)
### Initialze residual and offset values
if (least_residual == -1) {
least_residual <- temp_residual
least_offset <- loopColName
least_lm <- temp_lm
least_predict_df <- temp_predict_df
}#//END Initialize Least Residuals
### Assign the least residual
if (temp_residual < least_residual){
least_residual <- temp_residual
least_offset <- loopColName
least_lm <- temp_lm
least_predict_df <- temp_predict_df
}#//END assign least Residual
#[temp_df[lmCount]]
}#//*** END each column Name
### Get the last predicted death for model comparison
last_predicted_death <- round(least_predict_df$daily_total_deaths[nrow(least_predict_df)],0)
predicted_deaths <- append(predicted_deaths,last_predicted_death)
#### Get residuals from prediction
sse <- temp_df$daily_total_deaths - least_predict_df$daily_total_deaths
sse <- sse^2
sse <- sum(sse)
sse
## Degrees of Freedom for Error (n-p)
dfe <- rolling_days-2
#print(sse/dfe)
## Mean of Squares for Error:   MSE = SSE / DFE
mse <- sse / dfe
output_vector2 <- append(output_vector2,least_offset)
mse_vector <- append(mse_vector,mse)
lm_intercept <- append(lm_coefficient, least_lm$coefficients[1])
lm_coefficient <- append(lm_coefficient, least_lm$coefficients[2])
#mean_predicted_deaths <- append(mean_predicted_deaths, mean(temp_predict_df$daily_total_confirmed))
}### END Each data frame row
min_mse <- min(mse_vector[(mse_vector > 0)])
offset_error <- c()
for (i in 1:length(mse_vector)) {
if (mse_vector[i] == 0 ){
offset_error <- append(offset_error,0)
next
}
offset_error <- append(offset_error,min_mse/mse_vector[i])
}
offset_indexes <- vapply(output_vector2, function(x){
if (x==0) {return(0)}
return(as.numeric(gsub("offset_","",x)))
},numeric(1) )
#print(input_df)
#print(length(input_df$date))
#print(length(mse_vector))
#print(length(offset_error))
#print(length(output_vector2))
#print(length(predicted_deaths))
#print(length())
#print(length())
#print(length())
#print(length())
#print(length())
#print(length())
return(data.frame(date = input_df$date,mse=mse_vector,error=offset_error,offset=output_vector2,predicted_deaths=predicted_deaths,lm_intercept=lm_intercept,lm_coefficient=lm_coefficient,actual_deaths=input_df$daily_total_deaths,offset_index=offset_indexes))
#eval(parse(text=command))
}### END build rolling offset
### get last 30 days of of offset_daily_ statewide
temp_df <- offset_daily_df[startIndex:rowCount,]
tested_temp_df <- offset_testing_df[startIndex:rowCount,]
last_month_df <- data.frame( date = temp_df$date,
daily_total_confirmed = temp_df$daily_total_confirmed,
daily_total_deaths = temp_df$daily_total_deaths,
tested = tested_temp_df$tested,
"tested_offset" = temp_df[tested_last_offset],
"offset" = temp_df[last_offset])
offset_lm_15_df <- build_rolling_lm_offset(offset_daily_df,"daily_total_deaths",15)
############################################################
### build State confirmed offset columns -
############################################################
offset_daily_df <- build_offset_columns(daily_covid_df,"daily_total_confirmed",2:30)
offset_daily_df
offset_testing_df <- build_offset_columns(ca_testing_df,"tested",2:30)
offset_testing_df
offset_testing_lm15_df <- build_rolling_lm_offset(offset_testing_df,"daily_total_deaths",15)
offset_testing_lm15_df
daily_hospital_df
build_statewide_hospital_numbers <- function(input_df){
#### Sum the numbers across the state to build a big picture estimate
### Build unique dates
date <- unique(input_df$date)
### build statewide confirmed numbers
hospitalized_covid_patients <- sapply(date,function(x){
### Build data frame for each date
this_df <- (input_df [which(input_df$date == x),])
### Sum confirmed for daily total
return(sum(this_df$hospitalized_covid_patients) )
},simplify="array")
all_hospital_beds <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$all_hospital_beds) )
},simplify="array")
icu_available_beds <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$icu_available_beds) )
},simplify="array")
icu_combined <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$icu_combined) )
},simplify="array")
hospital_capactity <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$hospital_capactity) )
},simplify="array")
icu_capacity <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$icu_capacity) )
},simplify="array")
print(daily_covid_df$daily_total_deaths)
return(data.frame(date=date,
hospitalized_covid_patients=hospitalized_covid_patients,
all_hospital_beds=all_hospital_beds,
icu_available_beds=icu_available_beds,
icu_combined=icu_combined,
hospital_capactity=hospital_capactity,
icu_capacity=icu_capacity
))
}#// END build statewide numbers
############################################################
### build statewide Numbers - daily_covid_df
############################################################
daily_covid_df <- build_statewide_confirmed_numbers(ca_covid_df)
daily_hospital_df <- build_statewide_hospital_numbers(ca_hospital_df)
build_statewide_hospital_numbers <- function(input_df){
#### Sum the numbers across the state to build a big picture estimate
### Build unique dates
date <- unique(input_df$date)
### build statewide confirmed numbers
hospitalized_covid_patients <- sapply(date,function(x){
### Build data frame for each date
this_df <- (input_df [which(input_df$date == x),])
### Sum confirmed for daily total
return(sum(this_df$hospitalized_covid_patients) )
},simplify="array")
all_hospital_beds <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$all_hospital_beds) )
},simplify="array")
icu_available_beds <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$icu_available_beds) )
},simplify="array")
icu_combined <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$icu_combined) )
},simplify="array")
hospital_capactity <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$hospital_capactity) )
},simplify="array")
icu_capacity <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$icu_capacity) )
},simplify="array")
print(daily_covid_df$daily_total_deaths)
return(data.frame(date=date,
daily_total_deaths = daily_covid_df$daily_total_deaths,
hospitalized_covid_patients=hospitalized_covid_patients,
all_hospital_beds=all_hospital_beds,
icu_available_beds=icu_available_beds,
icu_combined=icu_combined,
hospital_capactity=hospital_capactity,
icu_capacity=icu_capacity
))
}#// END build statewide numbers
############################################################
### build statewide Numbers - daily_covid_df
############################################################
daily_covid_df <- build_statewide_confirmed_numbers(ca_covid_df)
daily_hospital_df <- build_statewide_hospital_numbers(ca_hospital_df)
return(data.frame(date=date,
daily_total_deaths = daily_covid_df$daily_total_deaths[-12],
hospitalized_covid_patients=hospitalized_covid_patients,
all_hospital_beds=all_hospital_beds,
icu_available_beds=icu_available_beds,
icu_combined=icu_combined,
hospital_capactity=hospital_capactity,
icu_capacity=icu_capacity
))
build_statewide_hospital_numbers <- function(input_df){
#### Sum the numbers across the state to build a big picture estimate
### Build unique dates
date <- unique(input_df$date)
### build statewide confirmed numbers
hospitalized_covid_patients <- sapply(date,function(x){
### Build data frame for each date
this_df <- (input_df [which(input_df$date == x),])
### Sum confirmed for daily total
return(sum(this_df$hospitalized_covid_patients) )
},simplify="array")
all_hospital_beds <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$all_hospital_beds) )
},simplify="array")
icu_available_beds <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$icu_available_beds) )
},simplify="array")
icu_combined <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$icu_combined) )
},simplify="array")
hospital_capactity <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$hospital_capactity) )
},simplify="array")
icu_capacity <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$icu_capacity) )
},simplify="array")
print(daily_covid_df$daily_total_deaths)
return(data.frame(date=date,
daily_total_deaths = daily_covid_df$daily_total_deaths[-12],
hospitalized_covid_patients=hospitalized_covid_patients,
all_hospital_beds=all_hospital_beds,
icu_available_beds=icu_available_beds,
icu_combined=icu_combined,
hospital_capactity=hospital_capactity,
icu_capacity=icu_capacity
))
}#// END build statewide numbers
############################################################
### build statewide Numbers - daily_covid_df
############################################################
daily_covid_df <- build_statewide_confirmed_numbers(ca_covid_df)
daily_hospital_df <- build_statewide_hospital_numbers(ca_hospital_df)
nrow(daily_hospital_df[-10])
nrow(daily_hospital_df[-10,])
daily_hospital_df[-10,]
head(daily_hospital_df[-20,])
head(daily_hospital_df[-20])
head(daily_hospital_df[,-20])
head(daily_hospital_df[20])
head(daily_hospital_df[20,])
head(daily_hospital_df[220,])
head(daily_hospital_df[-20,])
head(daily_hospital_df[12:nrow(daily_hospital_df),])
head(daily_hospital_df[12:nrow(daily_hospital_df)])
build_statewide_hospital_numbers <- function(input_df){
#### Sum the numbers across the state to build a big picture estimate
### Build unique dates
date <- unique(input_df$date)
### build statewide confirmed numbers
hospitalized_covid_patients <- sapply(date,function(x){
### Build data frame for each date
this_df <- (input_df [which(input_df$date == x),])
### Sum confirmed for daily total
return(sum(this_df$hospitalized_covid_patients) )
},simplify="array")
all_hospital_beds <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$all_hospital_beds) )
},simplify="array")
icu_available_beds <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$icu_available_beds) )
},simplify="array")
icu_combined <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$icu_combined) )
},simplify="array")
hospital_capactity <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$hospital_capactity) )
},simplify="array")
icu_capacity <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$icu_capacity) )
},simplify="array")
print(daily_covid_df$daily_total_deaths)
return(data.frame(date=date,
daily_total_deaths = daily_covid_df$daily_total_deaths[12:nrow(daily_covid_df),],
hospitalized_covid_patients=hospitalized_covid_patients,
all_hospital_beds=all_hospital_beds,
icu_available_beds=icu_available_beds,
icu_combined=icu_combined,
hospital_capactity=hospital_capactity,
icu_capacity=icu_capacity
))
}#// END build statewide numbers
daily_hospital_df <- build_statewide_hospital_numbers(ca_hospital_df)
build_statewide_hospital_numbers <- function(input_df){
#### Sum the numbers across the state to build a big picture estimate
### Build unique dates
date <- unique(input_df$date)
### build statewide confirmed numbers
hospitalized_covid_patients <- sapply(date,function(x){
### Build data frame for each date
this_df <- (input_df [which(input_df$date == x),])
### Sum confirmed for daily total
return(sum(this_df$hospitalized_covid_patients) )
},simplify="array")
all_hospital_beds <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$all_hospital_beds) )
},simplify="array")
icu_available_beds <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$icu_available_beds) )
},simplify="array")
icu_combined <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$icu_combined) )
},simplify="array")
hospital_capactity <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$hospital_capactity) )
},simplify="array")
icu_capacity <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$icu_capacity) )
},simplify="array")
print(daily_covid_df$daily_total_deaths)
return(data.frame(date=date,
daily_total_deaths = daily_covid_df$daily_total_deaths[12:nrow(daily_covid_df)],
hospitalized_covid_patients=hospitalized_covid_patients,
all_hospital_beds=all_hospital_beds,
icu_available_beds=icu_available_beds,
icu_combined=icu_combined,
hospital_capactity=hospital_capactity,
icu_capacity=icu_capacity
))
}#// END build statewide numbers
daily_hospital_df <- build_statewide_hospital_numbers(ca_hospital_df)
daily_hospital_df
build_statewide_hospital_numbers <- function(input_df){
#### Sum the numbers across the state to build a big picture estimate
### Build unique dates
date <- unique(input_df$date)
### build statewide confirmed numbers
hospitalized_covid_patients <- sapply(date,function(x){
### Build data frame for each date
this_df <- (input_df [which(input_df$date == x),])
### Sum confirmed for daily total
return(sum(this_df$hospitalized_covid_patients) )
},simplify="array")
all_hospital_beds <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$all_hospital_beds) )
},simplify="array")
icu_available_beds <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$icu_available_beds) )
},simplify="array")
icu_combined <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$icu_combined) )
},simplify="array")
hospital_capactity <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$hospital_capactity) )
},simplify="array")
icu_capacity <- sapply(date,function(x){
this_df <- (input_df [which(input_df$date == x),])
### Sum deaths for daily total
return(sum(this_df$icu_capacity) )
},simplify="array")
### Stitch in actual deaths - 12 days
return(data.frame(date=date,
daily_total_deaths = daily_covid_df$daily_total_deaths[12:nrow(daily_covid_df)],
hospitalized_covid_patients=hospitalized_covid_patients,
all_hospital_beds=all_hospital_beds,
icu_available_beds=icu_available_beds,
icu_combined=icu_combined,
hospital_capactity=hospital_capactity,
icu_capacity=icu_capacity
))
}#// END build statewide numbers
