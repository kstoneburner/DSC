---
title: "DSC520 Week 02 Assignment"
author: "Kurt Stoneburner"
date: "6/11/2020"
output: pdf_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
library(ggplot2)
library(ggplot2)
library(pastecs)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(pastecs)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(pastecs)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(pastecs)
setwd("C:\\Users\\newcomb\\DSCProjects\\dsc520_github")
#setwd("L:\\stonk\\projects\\DSC\\dsc520")
survey_df <- read.csv("data/acs-14-1yr-s0201.csv")
head(survey_df)
str(survey_df)
nrow(survey_df)
ncol(survey_df)
#setwd("C:\\Users\\newcomb\\DSCProjects\\dsc520_github")
#setwd("L:\\stonk\\projects\\DSC\\dsc520")
#readDir <- "C:\\Users\\newcomb\\DSCProjects\\dsc520_github"
readDir <- "L:\\stonk\\projects\\DSC\\dsc520"
library(ggplot2)
library(pastecs)
#setwd("C:\\Users\\newcomb\\DSCProjects\\dsc520_github")
#setwd("L:\\stonk\\projects\\DSC\\dsc520")
#readDir <- "C:\\Users\\newcomb\\DSCProjects\\dsc520_github"
readDir <- "L:\\stonk\\projects\\DSC\\dsc520"
survey_df <- read.csv(readDir + "data/acs-14-1yr-s0201.csv")
survey_df <- read.csv(readDir , "data/acs-14-1yr-s0201.csv")
#setwd("C:\\Users\\newcomb\\DSCProjects\\dsc520_github")
#setwd("L:\\stonk\\projects\\DSC\\dsc520")
readDir <- "C:\\Users\\newcomb\\DSCProjects\\dsc520_github"
survey_df <- read.csv(readDir , "data/acs-14-1yr-s0201.csv")
#setwd("C:\\Users\\newcomb\\DSCProjects\\dsc520_github")
#setwd("L:\\stonk\\projects\\DSC\\dsc520")
readDir <- "C:/Users/newcomb/DSCProjects/dsc520_github"
survey_df <- read.csv(readDir , "data/acs-14-1yr-s0201.csv")
#setwd("C:\\Users\\newcomb\\DSCProjects\\dsc520_github")
#setwd("L:\\stonk\\projects\\DSC\\dsc520")
readDir <- "C:\\Users\\newcomb\\DSCProjects\\dsc520_github"
survey_df <- read.csv(readDir , "data\\acs-14-1yr-s0201.csv")
survey_df <- read.csv(paste(readDir , "data\\acs-14-1yr-s0201.csv"))
#setwd("C:\\Users\\newcomb\\DSCProjects\\dsc520_github")
#setwd("L:\\stonk\\projects\\DSC\\dsc520")
readDir <- "C:\\Users\\newcomb\\DSCProjects\\dsc520_github\\"
survey_df <- read.csv(paste(readDir , "data\\acs-14-1yr-s0201.csv"))
#setwd("C:\\Users\\newcomb\\DSCProjects\\dsc520_github")
#setwd("L:\\stonk\\projects\\DSC\\dsc520")
readDir <- "C:\\Users\\newcomb\\DSCProjects\\dsc520_github"
survey_df <- read.csv(paste(readDir,"\\data\\acs-14-1yr-s0201.csv"))
survey_df <- read.csv(paste(readDir,"\\data\\acs-14-1yr-s0201.csv",sep=""))
library(ggplot2)
library(pastecs)
readDir <- "C:\\Users\\newcomb\\DSCProjects\\dsc520_github"
survey_df <- read.csv(paste(readDir,"\\data\\acs-14-1yr-s0201.csv",sep=""))
head(survey_df)
str(survey_df)
str(survey_df)
nrow(survey_df)
nrow(survey_df)
ncol(survey_df)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(pastecs)
readDir <- "C:\\Users\\newcomb\\DSCProjects\\dsc520_github"
#readDir <- "L:\\stonk\\projects\\DSC\\dsc520"
survey_df <- read.csv(paste(readDir,"\\data\\acs-14-1yr-s0201.csv",sep=""))
head(survey_df)
str(survey_df)
nrow(survey_df)
ncol(survey_df)
summary(cars)
plot(pressure)
install.packages("knitr")
?kable
## Create a dataframe called characters_df using the following information from LOTR
name <- c("Aragon", "Bilbo", "Frodo", "Galadriel", "Sam", "Gandalf", "Legolas", "Sauron", "Gollum")
race <- c("Men", "Hobbit", "Hobbit", "Elf", "Hobbit", "Maia", "Elf", "Maia", "Hobbit")
in_fellowship <- c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE)
ring_bearer <- c(FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE)
age <- c(88, 129, 51, 7000, 36, 2019, 2931, 7052, 589)
characters_df <- data.frame(name, race, in_fellowship, ring_bearer, age)
kable(characters_df,"latex", caption = "One Ring to Rule Them All")
library(knitr)
## Create a dataframe called characters_df using the following information from LOTR
name <- c("Aragon", "Bilbo", "Frodo", "Galadriel", "Sam", "Gandalf", "Legolas", "Sauron", "Gollum")
race <- c("Men", "Hobbit", "Hobbit", "Elf", "Hobbit", "Maia", "Elf", "Maia", "Hobbit")
in_fellowship <- c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE)
ring_bearer <- c(FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE)
age <- c(88, 129, 51, 7000, 36, 2019, 2931, 7052, 589)
characters_df <- data.frame(name, race, in_fellowship, ring_bearer, age)
kable(characters_df,"latex", caption = "One Ring to Rule Them All")
hopkins_us_confirmed_path <- paste(covidRootPath,"time_series_covid19_confirmed_US.csv",sep="")
hopkinsPath <- "C:\\Users\\newcomb\\DSCProjects\\COVID-19\\csse_covid_19_data\\csse_covid_19_time_series"
hopkins_us_confirmed_path <- paste(covidRootPath,"time_series_covid19_confirmed_US.csv",sep="")
hopkinsPath <- "C:\\Users\\newcomb\\DSCProjects\\COVID-19\\csse_covid_19_data\\csse_covid_19_time_series"
hopkins_us_confirmed_path <- paste(hopkinsPath,"time_series_covid19_confirmed_US.csv",sep="")
hopkins_us_confirmed <- read.csv(hopkins_us_confirmed_path)
hopkinsPath <- "C:\\Users\\newcomb\\DSCProjects\\COVID-19\\csse_covid_19_data\\csse_covid_19_time_series\\"
hopkins_us_confirmed_path <- paste(hopkinsPath,"time_series_covid19_confirmed_US.csv",sep="")
hopkins_us_confirmed <- read.csv(hopkins_us_confirmed_path)
hopkins_us_confirmed
head(hopkins_us_confirmed)
### Get a list of the states
hopkins_states <- unique(hopkins_us_confirmed$Province_State)
hopkins_states
hopkins_confirmed_condensed <- data.frame()
### Get a list of the states
hopkins_states <- unique(hopkins_us_confirmed$Province_State)
hopkins_states
hopkins_confirmed_condensed <- data.frame()
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
### Looping through each column
### Unlist converts data_frame list to vector
thisColumn <- unlist(hopkins_us_confirmed[stateCount])
head(thisColumn)
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
print(stateCount)
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
print(stateCount)
### Looping through each column
### Unlist converts data_frame list to vector
thisColumn <- unlist(hopkins_us_confirmed[stateCount])
head(thisColumn)
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisColName <- hopkins_states[stateCount]
print(thisColName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisColName <- hopkins_states[stateCount]
print(thisColName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
hopkins_us_confirmed[thisColName]
class(hopkins_us_confirmed[thisColName])
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Get a list of the states
hopkins_states <- unique(hopkins_us_confirmed$Province_State)
hopkins_states
hopkins_confirmed_condensed <- data.frame()
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisStateName <- hopkins_states[stateCount]
print(thisStateName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
temp_Row <- hopkins_us_confirmed[ ,which( hopkins_us_confirmed$Province_State==thisStateName ) ]
head(temp_row)
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisStateName <- hopkins_states[stateCount]
print(thisStateName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
temp_row <- hopkins_us_confirmed[ ,which( hopkins_us_confirmed$Province_State==thisStateName ) ]
head(temp_row)
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisStateName <- hopkins_states[stateCount]
print(thisStateName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
temp_row <- hopkins_us_confirmed[ which( hopkins_us_confirmed$Province_State==thisStateName, ) ]
head(temp_row)
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisStateName <- hopkins_states[stateCount]
print(thisStateName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
temp_row <- hopkins_us_confirmed[ which( hopkins_us_confirmed$Province_State==thisStateName, ) ]
temp_row
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisStateName <- hopkins_states[stateCount]
print(thisStateName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
print(hopkins_us_confirmed[ which( hopkins_us_confirmed$Province_State==thisStateName, ) ])
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisStateName <- hopkins_states[stateCount]
print(thisStateName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
print(hopkins_us_confirmed[ which( ,hopkins_us_confirmed$Province_State==thisStateName ) ])
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
## Set the working directory to the root of your DSC 520 directory
setwd("C:\\Users\\newcomb\\DSCProjects\\DSC\\covid")
ca_hospital_df <- read.csv("final_CA_Hospital.csv")
ca_covid_df <- read.csv("final_CA_Confirmed.csv")
tail(ca_hospital_df)
#############################################################
#### Get shared Dates for hospital and confirmed
#############################################################
date_hospital <- unique(ca_hospital_df$date)
