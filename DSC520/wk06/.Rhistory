### Unlist converts data_frame list to vector
thisColumn <- unlist(hopkins_us_confirmed[stateCount])
head(thisColumn)
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisColName <- hopkins_states[stateCount]
print(thisColName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisColName <- hopkins_states[stateCount]
print(thisColName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
hopkins_us_confirmed[thisColName]
class(hopkins_us_confirmed[thisColName])
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Get a list of the states
hopkins_states <- unique(hopkins_us_confirmed$Province_State)
hopkins_states
hopkins_confirmed_condensed <- data.frame()
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisStateName <- hopkins_states[stateCount]
print(thisStateName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
temp_Row <- hopkins_us_confirmed[ ,which( hopkins_us_confirmed$Province_State==thisStateName ) ]
head(temp_row)
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisStateName <- hopkins_states[stateCount]
print(thisStateName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
temp_row <- hopkins_us_confirmed[ ,which( hopkins_us_confirmed$Province_State==thisStateName ) ]
head(temp_row)
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisStateName <- hopkins_states[stateCount]
print(thisStateName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
temp_row <- hopkins_us_confirmed[ which( hopkins_us_confirmed$Province_State==thisStateName, ) ]
head(temp_row)
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisStateName <- hopkins_states[stateCount]
print(thisStateName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
temp_row <- hopkins_us_confirmed[ which( hopkins_us_confirmed$Province_State==thisStateName, ) ]
temp_row
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisStateName <- hopkins_states[stateCount]
print(thisStateName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
print(hopkins_us_confirmed[ which( hopkins_us_confirmed$Province_State==thisStateName, ) ])
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisStateName <- hopkins_states[stateCount]
print(thisStateName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
print(hopkins_us_confirmed[ which( ,hopkins_us_confirmed$Province_State==thisStateName ) ])
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
setwd("C:\\Users\\newcomb\\DSCProjects\\DSC\\DSC520\\wk06")
## Load the housing data
raw_housing_df <- read.csv("week-7-housing.csv")
head(raw_housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"present_use"))[,-1]
#### Combine the bathrooms
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
# Assignment: 6.1 - Housing Data
# Name: Stoneburner, Kurt
# Date: 2020-07-06
removeColsFromDF <- function(input_df, removeCols){
###########################################################################
### Remove Columns from a a data frame the Hard Way!
### I don't like the clever answers from the Internet that I don't quite
### Understand.
###########################################################################
### Purpose: Return a data frame without the columns listed in removeCols
###########################################################################
### Variables #############################################################
###########################################################################
### input_df: Data Frame that needs columns removed
### removeCols: Vector of columns names as strings to be removed:
###             Example: c("date","Location","col1","col2")
###########################################################################
### Build a new vector of names by excluding values in removeCols
newColNames <- lapply(colnames(input_df), function(x){
if ( (x %in% removeCols) == FALSE) {return(x)}
})
### Initialize output data frame with the first column from input.
### This allows us to cbind in the loop. The first column will be
### removed later
output_df = data.frame(input_df[1])
### Build output data frame by adding in columns from newColNames
### For each new column name
for (i in 1:length(newColNames)){
########################################################################################
### Build column name
########################################################################################
### Not exactly sure why I need to unlist.
### probably should use a different function from lapply. Maybe capply? But this works
########################################################################################
thisColName <- unlist(newColNames[i])
output_df <- cbind(output_df,input_df[thisColName])
}### END Each New Column Name
return(output_df)
}### END RemoveColsFromDF
setwd("C:\\Users\\newcomb\\DSCProjects\\DSC\\DSC520\\wk06")
## Load the housing data
raw_housing_df <- read.csv("week-7-housing.csv")
head(raw_housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"present_use"))[,-1]
#### Combine the bathrooms
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df <- cbind(housing_df,bath_total)
tail(housing_df)
base_lm <-  lm(Sale.Price ~ sq_ft_lot, data=housing_df)
tail(raw_housing_df)
tail(housing_df)
tail(housing_df)
head(raw_housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"present_use"))[,-1]
#### Combine the bathrooms
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df <- cbind(housing_df,bath_total)
tail(housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"sitetype",
"sale_reason",
"present_use"))[,-1]
#### Combine the bathrooms
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df <- cbind(housing_df,bath_total)
housing_df <- cbind(housing_df,bath_total)
## Load the housing data
raw_housing_df <- read.csv("week-7-housing.csv")
head(raw_housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"sitetype",
"sale_reason",
"present_use"))[,-1]
#### Combine the bathrooms
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df <- cbind(housing_df,bath_total)
tail(housing_df)
tail(raw_housing_df)
tail(housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"sitetype",
"sale_reason",
"sale_instrument",
"present_use"))[,-1]
#### Combine the bathrooms
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df <- cbind(housing_df,bath_total)
tail(housing_df)
tail(housing_df)
# Assignment: 6.1 - Housing Data
# Name: Stoneburner, Kurt
# Date: 2020-07-06
removeColsFromDF <- function(input_df, removeCols){
###########################################################################
### Remove Columns from a a data frame the Hard Way!
### I don't like the clever answers from the Internet that I don't quite
### Understand.
###########################################################################
### Purpose: Return a data frame without the columns listed in removeCols
###########################################################################
### Variables #############################################################
###########################################################################
### input_df: Data Frame that needs columns removed
### removeCols: Vector of columns names as strings to be removed:
###             Example: c("date","Location","col1","col2")
###########################################################################
### Build a new vector of names by excluding values in removeCols
newColNames <- lapply(colnames(input_df), function(x){
if ( (x %in% removeCols) == FALSE) {return(x)}
})
### Initialize output data frame with the first column from input.
### This allows us to cbind in the loop. The first column will be
### removed later
output_df = data.frame(input_df[1])
### Build output data frame by adding in columns from newColNames
### For each new column name
for (i in 1:length(newColNames)){
########################################################################################
### Build column name
########################################################################################
### Not exactly sure why I need to unlist.
### probably should use a different function from lapply. Maybe capply? But this works
########################################################################################
thisColName <- unlist(newColNames[i])
output_df <- cbind(output_df,input_df[thisColName])
}### END Each New Column Name
return(output_df)
}### END RemoveColsFromDF
setwd("C:\\Users\\newcomb\\DSCProjects\\DSC\\DSC520\\wk06")
## Load the housing data
raw_housing_df <- read.csv("week-7-housing.csv")
head(raw_housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"present_use"))[,-1]
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"sitetype",
"sale_warning",
"present_use",
"sale_reason",
"sale_instrument",
"Sale.Date"))[,-1]
#### Combine the bathrooms
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df <- cbind(housing_df,bath_total)
tail(housing_df)
cor(housing_df)[1,]
### Calculate the age of the house (Sale Date - sale_year)
cor(housing_df)[1,]
### b.
### base_lm: Predicts Sale Price based on lot lot size
salePrice_base_lm <-  lm(Sale.Price ~ sq_ft_lot, data=housing_df)
summary(salePrice_base_lm)
salePrice_naieve_lm <-  lm(Sale.Price ~ zip5 + bedrooms + bath_total + square_feet_total_living, data=housing_df)
summary(salePrice_naieve_lm)
salePrice_complex_4_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bath_total, data=housing_df)
summary(salePrice_complex_4_lm)
salePrice_complex_6_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bedrooms + bath_total + year_built, data=housing_df)
summary(salePrice_complex_6_lm)
# Assignment: 6.1 - Housing Data
# Name: Stoneburner, Kurt
# Date: 2020-07-06
removeColsFromDF <- function(input_df, removeCols){
###########################################################################
### Remove Columns from a a data frame the Hard Way!
### I don't like the clever answers from the Internet that I don't quite
### Understand.
###########################################################################
### Purpose: Return a data frame without the columns listed in removeCols
###########################################################################
### Variables #############################################################
###########################################################################
### input_df: Data Frame that needs columns removed
### removeCols: Vector of columns names as strings to be removed:
###             Example: c("date","Location","col1","col2")
###########################################################################
### Build a new vector of names by excluding values in removeCols
newColNames <- lapply(colnames(input_df), function(x){
if ( (x %in% removeCols) == FALSE) {return(x)}
})
### Initialize output data frame with the first column from input.
### This allows us to cbind in the loop. The first column will be
### removed later
output_df = data.frame(input_df[1])
### Build output data frame by adding in columns from newColNames
### For each new column name
for (i in 1:length(newColNames)){
########################################################################################
### Build column name
########################################################################################
### Not exactly sure why I need to unlist.
### probably should use a different function from lapply. Maybe capply? But this works
########################################################################################
thisColName <- unlist(newColNames[i])
output_df <- cbind(output_df,input_df[thisColName])
}### END Each New Column Name
return(output_df)
}### END RemoveColsFromDF
setwd("C:\\Users\\newcomb\\DSCProjects\\DSC\\DSC520\\wk06")
## Load the housing data
raw_housing_df <- read.csv("week-7-housing.csv")
head(raw_housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"present_use"))[,-1]
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"sitetype",
"sale_warning",
"present_use",
"sale_reason",
"sale_instrument",
"Sale.Date"))[,-1]
#### Combine the bathrooms
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df <- cbind(housing_df,bath_total)
tail(housing_df)
year_built <- as.numeric(raw_housing_df$year_built)
year_built
raw_housing_df$Sale.Date
sale_year <- format(as.Date(raw_housing_df$Sale.Date, format="%m/%d/%Y"),"%Y")
sale_year
sale_year <- as.numeric(sale_year)
sale_year
house_age <- (sale_year - year_built)
house_age
house_age <- vapply(house_age, function(x){
if (x < 0 ) { return(0)}
return(x)
},numeric(1))
cor(housing_df)[1,]
housing_df <- cbind(housing_df,house_age)
salePrice_complex_5_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bedrooms + bath_total + house_age, data=housing_df)
summary(salePrice_complex_5_lm)
salePrice_complex_6_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bedrooms + bath_total + year_built, data=housing_df)
summary(salePrice_complex_6_lm)
summary(housing_df$Sale.Price)
sd(housing_df$Sale.Price)
?lm.beta()
library(QuantPsyc)
install.packages("QuantPsyc")
library(QuantPsyc)
library(QuantPsyc)
lm.beta(salePrice_house_age_lm)
salePrice_house_age_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bedrooms + bath_total + house_age, data=housing_df)
summary(salePrice_house_age_lm)
salePrice_year_built_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bedrooms + bath_total + year_built, data=housing_df)
summary(salePrice_year_built_lm)
lm.beta(salePrice_house_age_lm)
lm.beta(salePrice_year_built_lm)
