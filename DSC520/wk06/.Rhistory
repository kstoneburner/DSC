t.test(housing_df$year_built)
t.test(salePrice_base_lm$model)
t.test(salePrice_naieve_lm$model)
t.test(salePrice_house_age_lm$model)
t.test(salePrice_year_built_lm$model)
cor(num_housing_df)[1,]
head(num_housing_df)
### F ratio..larger better
### F = ssm / SSr - sum squares of the mean, the sum squares of the difference between data and prediction.
###                 ssr is the sum squares of the residuals!!!
### F = Essentially the mean / error. Bigger is better fit
### Write Down something for T scores and Zscores.
unique(bath_total)
hist(bath_total)
plot(bath_total,housing_df$Sale.Price)
plot(raw_housing_df$bath_full_count,housing_df$Sale.Price)
summary(raw_housing_df$bath_full_count)
summary(bath_total)
plot(iqr_dumper_df$bath_total,iqr_dumper_df$Sale.Price)
housing_df$Sale.Date <-  as.Date(housing_df$Sale.Date,  tryFormats = c("%m/%d/%Y") )
sale_year
housing_df <- cbind(housing_df,sale_year)
housing_df <- cbind(housing_df,year_built)
housing_df$year_built
housing_df[ which(housing_df$sale_year < housing_df$year_built),]
raw_housing_df[136,]
housing_df$Sale.Date
head(housing_df)
str(housing_df)
unique(raw_housing_df$sitetype)
unique(raw_housing_df$current_zoning)
unique(raw_housing_df$year_renovated)
unique(raw_housing_df$sale_reason)
unique(raw_housing_df$building_grade)
unique(raw_housing_df$present_use)
unique(raw_housing_df$sale_warning)
unique(raw_housing_df$sale_instrument)
unique(raw_housing_df$present_use)
unique(raw_housing_df$present_use)
present_use_count <- vapply(unique(raw_housing_df$present_use), function(x){
thisUseVector <- raw_housing_df [ which(raw_housing_df$present_use == x),]
return(nrow(thisUseVector))},numeric(1))
length(unique(raw_housing_df$current_zoning))
current_zoning_count <- vapply(unique(raw_housing_df$current_zoning), function(x){
thisUseVector <- raw_housing_df [ which(raw_housing_df$current_zoning == x),]
return(nrow(thisUseVector))},numeric(1))
current_zoning_count
## Convert current_zoning into a numeric value.
## Build a number vector based on the unique values in current_zoning
zoning_zones <- unique(raw_housing_df$current_zoning)
### Return the index Value from zoning_zones
coded_zoning <- vapply(raw_housing_df$current_zoning, function(x){
thisIndex <- match(x,zoning_zones)
return(thisIndex)},numeric(1))
cor(cbind(housing_df,coded_zoning))[1,]
tail(housing_df)
hist(coded_zoning)
hist(raw_housing_df$present_use)
cor(coded_zoning,raw_housing_df$present_use)
large_residuals <- vapply(salePrice_base_lm$standardized.residuals, function(x){
if ( x > 2 | x < -2) {return(x)}
},numeric(1))
large_residuals <- sapply(salePrice_base_lm$standardized.residuals, function(x){
if ( x > 2 | x < -2) {return(x)}
},simplify="array")
eval_df$standardized.residuals
large_residuals
large_residuals <- c()
for ( x in 1:length(salePrice_base_lm$standardized.residuals)) {
if ( salePrice_base_lm$standardized.residuals[x] > 2 | salePrice_base_lm$standardized.residuals[x] < -2) {
large_residuals <- append(large_residuals,salePrice_base_lm$standardized.residuals[x])
}
}
large_residuals
length(large_residuals)
length(large_residuals) / length(salePrice_base_lm$standardized.residuals)
salePrice_base_lm$large_residuals <- salePrice_base_lm$standardized.residuals[x] > 2 | salePrice_base_lm$standardized.residuals[x] < -2
sum(salePrice_base_lm$large_residuals)
salePrice_base_lm$large_residuals <- salePrice_base_lm$standardized.residuals > 2 | salePrice_base_lm$standardized.residuals < -2
sum(salePrice_base_lm$large_residuals)
salePrice_base_lm$large_residuals
salePrice_base_lm[salePrice_base_lm$large_residuals, c("cooks.distance","leverage","covariance.ratios") ]
salePrice_base_lm[salePrice_base_lm$large_residuals, c("cooks.distance","leverage","covariance.ratios")]
salePrice_base_lm[salePrice_base_lm$large_residuals,]
salePrice_base_lm$large_residuals
salePrice_base_lm[salePrice_base_lm$large_residuals, c("cooks.distance")]
head(salePrice_base_lm)
head(salePrice_base_lm$large_residuals)
head(salePrice_base_lm)
salePrice_base_lm[salePrice_base_lm$large_residuals, c("cooks.distance")]
salePrice_base_lm[large_residuals, c("cooks.distance")]
salePrice_base_lm[salePrice_base_lm$large_residuals, salePrice_base_lm$cooks.distance]
salePrice_base_lm[salePrice_base_lm$large_residuals,]
salePrice_base_lm[ salePrice_base_lm$large_residuals ]
salePrice_base_lm[ salePrice_base_lm$large_residuals, ]
salePrice_base_lm$large_residuals[1,]
salePrice_base_lm$large_residuals[1]
salePrice_base_lm$large_residuals
salePrice_base_lm$large_residuals [salePrice_base_lm$large_residuals,]
salePrice_base_lm$large_residuals [1,]
salePrice_base_lm$large_residuals []
salePrice_base_lm$large_residuals [,1]
salePrice_base_lm$large_residuals [1]
class(salePrice_base_lm$large_residuals [1])
salePrice_base_lm$large_residuals [c("cooks.distance","leverage","covariance.ratios")]
large_residuals
salePrice_base_lm$large_residuals <- salePrice_base_lm$standardized.residuals > 2 | salePrice_base_lm$standardized.residuals < -2
salePrice_base_lm$large_residuals[1]
salePrice_base_lm$large_residuals[1,]
salePrice_base_lm[1,]
evail_df <- data.frame(standardized.residuals = rstandard(salePrice_house_age_lm) )
evail_df$studentized.residuals <- rstudent(salePrice_house_age_lm)
evail_df$cooks.distance <- cooks.distance(salePrice_house_age_lm)
evail_df$dfbeta <- dfbeta(salePrice_house_age_lm)
evail_df$dffit <- dffits(salePrice_house_age_lm)
evail_df$leverage <- hatvalues(salePrice_house_age_lm)
evail_df$covariance.ratios <- covratio(salePrice_house_age_lm)
evail_df$large_residuals <- evail_df$standardized.residuals > 2 | evail_df$standardized.residuals < -2
evail_df[evail_df$large_residuals,)
salePrice_base_lm[salePrice_base_lm$large_residuals, c("cooks.distance","leverage","covariance.ratios")]
salePrice_base_lm$large_residuals [c("cooks.distance","leverage","covariance.ratios")]
salePrice_base_lm[1,]
head(salePrice_base_lm)
std_deviation_df <- data.frame (
variable =
c("Sale Price",
"sqft Living",
"Building Grade",
"bedrooms",
"bathrooms",
"house age"),
std_dev =
c( sd(raw_housing_df$Sale.Price),
sd(housing_df$square_feet_total_living),
sd(housing_df$building_grade),
sd(housing_df$bedrooms),
sd(housing_df$bath_total),
sd(housing_df$house_age)
))
std_deviation_df
############################################
#### Confidence Intervals the Hard way
############################################
##### Start by Calculating Z Scores the hard way
##### zScores <- (dataset - mean(dataset)) / sd(dataset)
# Calculate Standard Error in R
# using the SD function / SQRT of vector length
## Standard error: Standard Deviation / sqrt(sample size)
##    sd(values) / sqrt(length(values))
##
## lower boundary: mean() minus mini
##      mean(values) - ( min(values) * Standard Error )
##      mean(values) - ( 1.96 * Standard Error )
##
## upper boundary:
##      mean(values) + ( max(values) * Standard Error )
##      mean(values) + ( 1.96 * Standard Error )
value <- salePrice_house_age_lm$model$Sale.Price
zScores <- (value - mean(value)) / sd(value)
min(zScores)
### Calculate standard_error for value
standard_error <- sd(value) / sqrt(length(value))
standard_error #3565.217
mean(value) - min(value) * standard_error
t.test(value)
##lower Bound
mean(value) - (1.96*standard_error)
##upper Bound
mean(value) + (1.96 * standard_error)
## c. Execute a summary() function on two variables defined in the previous step to compare the model results. What are the R2 and Adjusted R2 statistics? Explain what these results tell you about the overall model. Did the inclusion of the additional predictors help explain any large variations found in Sale Price?
summary(salePrice_base_lm)
cor(housing_df[2:length(housing_df)])
summary(salePrice_complex_lm)
head(housing_df)
summary(housing_df$Sale.Price)
sd(housing_df$Sale.Price)
tail(housing_df)
t.test(housing_df$Sale.Price)
t.test(housing_df$building_grade)
t.test(housing_df$square_feet_total_living)
t.test(housing_df$bedrooms)
t.test(housing_df$bath_total)
t.test(housing_df$house_age)
t.test(housing_df$year_built)
t.test(salePrice_base_lm$model)
t.test(salePrice_naieve_lm$model)
t.test(salePrice_house_age_lm$model)
t.test(salePrice_year_built_lm$model)
cor(num_housing_df)[1,]
head(num_housing_df)
### F ratio..larger better
### F = ssm / SSr - sum squares of the mean, the sum squares of the difference between data and prediction.
###                 ssr is the sum squares of the residuals!!!
### F = Essentially the mean / error. Bigger is better fit
### Write Down something for T scores and Zscores.
unique(bath_total)
hist(bath_total)
plot(bath_total,housing_df$Sale.Price)
plot(raw_housing_df$bath_full_count,housing_df$Sale.Price)
summary(raw_housing_df$bath_full_count)
summary(bath_total)
plot(iqr_dumper_df$bath_total,iqr_dumper_df$Sale.Price)
housing_df$Sale.Date <-  as.Date(housing_df$Sale.Date,  tryFormats = c("%m/%d/%Y") )
sale_year
housing_df <- cbind(housing_df,sale_year)
housing_df <- cbind(housing_df,year_built)
housing_df$year_built
housing_df[ which(housing_df$sale_year < housing_df$year_built),]
raw_housing_df[136,]
housing_df$Sale.Date
head(housing_df)
str(housing_df)
unique(raw_housing_df$sitetype)
unique(raw_housing_df$current_zoning)
unique(raw_housing_df$year_renovated)
unique(raw_housing_df$sale_reason)
unique(raw_housing_df$building_grade)
unique(raw_housing_df$present_use)
unique(raw_housing_df$sale_warning)
unique(raw_housing_df$sale_instrument)
unique(raw_housing_df$present_use)
unique(raw_housing_df$present_use)
present_use_count <- vapply(unique(raw_housing_df$present_use), function(x){
thisUseVector <- raw_housing_df [ which(raw_housing_df$present_use == x),]
return(nrow(thisUseVector))},numeric(1))
length(unique(raw_housing_df$current_zoning))
current_zoning_count <- vapply(unique(raw_housing_df$current_zoning), function(x){
thisUseVector <- raw_housing_df [ which(raw_housing_df$current_zoning == x),]
return(nrow(thisUseVector))},numeric(1))
current_zoning_count
## Convert current_zoning into a numeric value.
## Build a number vector based on the unique values in current_zoning
zoning_zones <- unique(raw_housing_df$current_zoning)
### Return the index Value from zoning_zones
coded_zoning <- vapply(raw_housing_df$current_zoning, function(x){
thisIndex <- match(x,zoning_zones)
return(thisIndex)},numeric(1))
cor(cbind(housing_df,coded_zoning))[1,]
tail(housing_df)
hist(coded_zoning)
hist(raw_housing_df$present_use)
cor(coded_zoning,raw_housing_df$present_use)
evail_df[evail_df$large_residuals,]
evail_df[evail_df$large_residuals,c("cooks.distance","leverage","covariance.ratios")]
sum(evail_df[evail_df$large_residuals)
sum(evail_df$large_residuals)
sum(evail_df$large_residuals)
sum(evail_df$large_residuals) /nrow(evail_df)
housing_df$standardized.residuals <- rstandard(salePrice_house_age_lm)
housing_df$studentized.residuals <- rstudent(salePrice_house_age_lm)
housing_df$cooks.distance <- cooks.distance(salePrice_house_age_lm)
housing_df$dfbeta <- dfbeta(salePrice_house_age_lm)
housing_df$dffit <- dffits(salePrice_house_age_lm)
housing_df$leverage <- hatvalues(salePrice_house_age_lm)
housing_df$covariance.ratios <- covratio(salePrice_house_age_lm)
housing_df$standardized.residuals > 2 | housing_df$standardized.residuals < -2
housing_df$large_residuals <- housing_df$standardized.residuals > 2 | housing_df$standardized.residuals < -2
sum(housing_df$large_residuals) /nrow(housing_df)
housing_df[housing_df$large_residuals,c("square_feet_total_living","building_grade","bedrooms","bath_total","house_age")]
housing_df[housing_df$large_residuals,c("Sale.Price","square_feet_total_living","building_grade","bedrooms","bath_total","house_age")]
housing_df[housing_df$large_residuals,c("cooks.distance","leverage","covariance.ratios")]
sum(housing_df$large_residuals)
housing_df[housing_df$large_residuals,]
housing_df[housing_df$large_residuals,c("standardized.residuals")]
sum(housing_df[housing_df$large_residuals,c("standardized.residuals")])
housing_df$standardized.residuals > 2.5 | housing_df$standardized.residuals < -2.5
sum(housing_df$standardized.residuals > 2.5 | housing_df$standardized.residuals < -2.5)
sum(housing_df$standardized.residuals > 2.5 | housing_df$standardized.residuals < -2.5) / nrow(housing_df)
sum(housing_df$standardized.residuals > 3 | housing_df$standardized.residuals < -3) / nrow(housing_df)
sum(housing_df$standardized.residuals > 3 | housing_df$standardized.residuals < -3) )
housing_df$standardized.residuals > 3 | housing_df$standardized.residuals < -3
sum(housing_df$standardized.residuals > 3 | housing_df$standardized.residuals < -3)
salePrice_base_lm$standardized.residuals <- rstandard(salePrice_house_age_lm)
salePrice_base_lm$studentized.residuals <- rstudent(salePrice_house_age_lm)
salePrice_base_lm$cooks.distance <- cooks.distance(salePrice_house_age_lm)
salePrice_base_lm$dfbeta <- dfbeta(salePrice_house_age_lm)
salePrice_base_lm$dffit <- dffits(salePrice_house_age_lm)
salePrice_base_lm$leverage <- hatvalues(salePrice_house_age_lm)
salePrice_base_lm$covariance.ratios <- covratio(salePrice_house_age_lm)
salePrice_house_age_lm$standardized.residuals <- rstandard(salePrice_house_age_lm)
salePrice_house_age_lm$studentized.residuals <- rstudent(salePrice_house_age_lm)
salePrice_house_age_lm$cooks.distance <- cooks.distance(salePrice_house_age_lm)
salePrice_house_age_lm$dfbeta <- dfbeta(salePrice_house_age_lm)
salePrice_house_age_lm$dffit <- dffits(salePrice_house_age_lm)
salePrice_house_age_lm$leverage <- hatvalues(salePrice_house_age_lm)
salePrice_house_age_lm$covariance.ratios <- covratio(salePrice_house_age_lm)
salePrice_house_age_lm$standardized.residuals > 2 | salePrice_house_age_lm$standardized.residuals < -2
### p292
### I think this is out casewise diagnostic
salePrice_house_age_lm$standardized.residuals > 2 | salePrice_house_age_lm$standardized.residuals < -2
### Should be about 1% - this model is 1.95% - Could be high
sum(salePrice_house_age_lm$standardized.residuals > 2.5 | salePrice_house_age_lm$standardized.residuals < -2.5) / nrow(salePrice_house_age_lm)
### Should be about 1% - this model is 1.95% - Could be high
sum(salePrice_house_age_lm$standardized.residuals > 2.5 | salePrice_house_age_lm$standardized.residuals < -2.5) / nrow(salePrice_house_age_lm)
### p292
### I think this is out casewise diagnostic
salePrice_base_lm$standardized.residuals > 2 | salePrice_base_lm$standardized.residuals < -2
### Should be about 1% - this model is 1.95% - Could be high
sum(salePrice_base_lm$standardized.residuals > 2.5 | salePrice_base_lm$standardized.residuals < -2.5) / nrow(salePrice_base_lm)
### Should be about 1% - this model is 1.95% - Could be high
sum(salePrice_base_lm$standardized.residuals > 2.5 | salePrice_base_lm$standardized.residuals < -2.5) / nrow(salePrice_base_lm$model)
### Anything above 3 represents outliers that affect the model
sum(salePrice_house_age_lm$standardized.residuals > 3 | salePrice_house_age_lm$standardized.residuals < -3) ) / nrow(salePrice_base_lm$model
### Anything above 3 represents outliers that affect the model
sum(salePrice_house_age_lm$standardized.residuals > 3 | salePrice_house_age_lm$standardized.residuals < -3 ) / nrow(salePrice_base_lm$model
### Anything above 3 represents outliers that affect the model
sum(salePrice_house_age_lm$standardized.residuals > 3 | salePrice_house_age_lm$standardized.residuals < -3 ) / nrow(salePrice_base_lm$model
### Anything above 3 represents outliers that affect the model
sum(salePrice_house_age_lm$standardized.residuals > 3 | salePrice_house_age_lm$standardized.residuals < -3 ) / nrow(salePrice_base_lm$model)
### Anything above 3 represents outliers that affect the model
sum(salePrice_base_lm$standardized.residuals > 3 | salePrice_base_lm$standardized.residuals < -3 ) / nrow(salePrice_base_lm$model)
salePrice_base_lm
str(salePrice_base_lm)
salePrice_house_age_lm$model$square_feet_total_living < 2 | salePrice_house_age_lm$model$square_feet_total_living < 2
sum(salePrice_house_age_lm$model$square_feet_total_living < 2 | salePrice_house_age_lm$model$square_feet_total_living < 2)
sum(salePrice_house_age_lm$model$Sales.Price < 2 | salePrice_house_age_lm$model$Sales.Price < 2)
sum(salePrice_house_age_lm$model$bath_total < 2 | salePrice_house_age_lm$model$bath_total < 2)
sum(salePrice_house_age_lm$model$square_feet_total_living > 2 | salePrice_house_age_lm$model$square_feet_total_living < -2)
rstandard(square_feet_total_living)
rstandard(salePrice_house_age_lm$model$square_feet_total_living)
rstandard(salePrice_house_age_lm)
rstandard(salePrice_house_age_lmmodel$square_feet_total_living)
rstandard(salePrice_house_age_lm$model$square_feet_total_living)
sum(salePrice_base_lm$standardized.residuals)
#salePrice_house_age_lm
salePrice_house_age_lm$standardized.residuals <- rstandard(salePrice_house_age_lm)
salePrice_house_age_lm$studentized.residuals <- rstudent(salePrice_house_age_lm)
salePrice_house_age_lm$cooks.distance <- cooks.distance(salePrice_house_age_lm)
salePrice_house_age_lm$dfbeta <- dfbeta(salePrice_house_age_lm)
salePrice_house_age_lm$dffit <- dffits(salePrice_house_age_lm)
salePrice_house_age_lm$leverage <- hatvalues(salePrice_house_age_lm)
salePrice_house_age_lm$covariance.ratios <- covratio(salePrice_house_age_lm)
### p292
### I think this is out casewise diagnostic
large_residuals <- salePrice_base_lm$standardized.residuals > 2 | salePrice_base_lm$standardized.residuals < -2
large_residuals
sum(large_residuals)
housing_df[large_residuals,]
housing_df$cooks.distance[large_residuals,]>1
housing_df$cooks.distance[large_residuals,]
housing_df[large_residuals,c('cooks.distance')]
housing_df[large_residuals,c('cooks.distance')] < 1
housing_df[large_residuals,c('cooks.distance')] > 1
sum(housing_df[large_residuals,c('cooks.distance')] > 1)
## k = number of predictors
## k= 5
## average levarage = k + 1/n
nrow(housing_df)
## k = number of predictors
## k= 5
## average levarage = k + 1/n
## n= 12865
5 + (1/12865)
## k = number of predictors
## k= 5
## average levarage = (k + 1)/n
## n= 12865
(5 + 1)/12865
## k = number of predictors
## k= 5
## average levarage = (k + 1)/n
## n= 12865
1 + 3*(5 + 1)/12865
1 - 3*(5 + 1)/12865
### Should be about 1% - this model is 1.95% - Could be high
sum(salePrice_base_lm$standardized.residuals > 2.5 | salePrice_base_lm$standardized.residuals < -2.5) / nrow(salePrice_base_lm$model)
### Should be about 1% - this model is 1.95% - Could be high
sum(salePrice_house_age_lm$standardized.residuals > 2.5 | salePrice_house_age_lm$standardized.residuals < -2.5) / nrow(salePrice_base_lm$model)
salePrice_house_age_lm$standardized.residuals > 2.5 | salePrice_house_age_lm$standardized.residuals < -2.5) / nrow(salePrice_base_lm$model
salePrice_house_age_lm$standardized.residuals > 2.5 | salePrice_house_age_lm$standardized.residuals < -2.5 / nrow(salePrice_base_lm$model)
sum(housing_df[large_residuals,c('cooks.distance')] > 1)
housing_df[large_residuals,c('cooks.distance')]
housing_df[large_residuals,c('covariance.ratios')]
## k = number of predictors
## k= 5
## average levarage = (k + 1)/n
## n= 12865
#covariance outliers
#p291
1 + 3*(5 + 1)/12865
1 - 3*(5 + 1)/12865
## k = number of predictors
## k= 5
## average levarage = (k + 1)/n
## n= 12865
#covariance outliers
#p291
upperCov <- 1 + 3*(5 + 1)/12865
## k = number of predictors
## k= 5
## average levarage = (k + 1)/n
## n= 12865
#covariance outliers
#p291
upperCov <- 1 + 3*(5 + 1)/12865
lowerCov <- 1 - 3*(5 + 1)/12865
housing_df[large_residuals,c('covariance.ratios')] > upperCov
housing_df[large_residuals,c('covariance.ratios')] > upperCov | housing_df[large_residuals,c('covariance.ratios')] < lowerCov
### levarage test
### k+1 / n = average leverage
average_leverage <- (k + 1) / n
k<-5
n <- nrow(housing_df)
n <- nrow(housing_df)
upperCov <- 1 + 3*(k + 1)/n
lowerCov <- 1 - 3*(k + 1)/n
### levarage test
### k+1 / n = average leverage
average_leverage <- (k + 1) / n
average_leverage
### Displays outliers with large residuals > 2
housing_df[housing_df$large_residuals,c("Sale.Price","square_feet_total_living","building_grade","bedrooms","bath_total","house_age")]
housing_df[housing_df$large_residuals,c("cooks.distance","leverage","covariance.ratios")]
average_leverage_2x_boundary <- average_leverage *2
average_leverage_2x_boundary
housing_df[large_residuals,c('leverage')] > average_leverage_2x_boundary
housing_df[large_residuals,c('leverage')] > average_leverage_2x_boundary,]
housing_df[(large_residuals,c('leverage')] > average_leverage_2x_boundary),]
housing_df[ (housing_df[large_residuals,c('leverage') ] ) ]
housing_df[large_residuals,c('leverage')]
housing_df[large_residuals,c('leverage')] > average_leverage_2x_boundary
housing_df[housing_df$leverage,]
housing_df[housing_df$leverage]
salePrice_house_age_lm[salePrice_house_age_lm$leverage]
salePrice_house_age_lm$leverage
salePrice_house_age_lm$leverage >average_leverage_2x_boundary
salePrice_house_age_lm[ salePrice_house_age_lm$leverage > average_leverage_2x_boundary, ]
salePrice_house_age_lm[ salePrice_house_age_lm$leverage  ]
housing_df[large_residuals,c('leverage')] > average_leverage_2x_boundary
housing_df[ (housing_df[large_residuals,c('leverage') ] ) ]
salePrice_house_age_lm[salePrice_base_lm$large_residuals, c("cooks.distance","leverage","covariance.ratios")]
salePrice_house_age_lm[salePrice_base_lm$model$large_residuals, c("cooks.distance","leverage","covariance.ratios")]
salePrice_house_age_lm$large_residuals
### p292
### I think this is out casewise diagnostic
salePrice_base_lm$large_residuals <- salePrice_base_lm$standardized.residuals > 2 | salePrice_base_lm$standardized.residuals < -2
salePrice_base_lm$large_residuals
salePrice_base_lm$large_residuals == TRUE
salePrice_house_age_lm$large_residuals [c("cooks.distance","leverage","covariance.ratios")]
salePrice_house_age_lm[salePrice_base_lm$model$large_residuals, c("cooks.distance","leverage","covariance.ratios")]
salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("cooks.distance","leverage","covariance.ratios")]
salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, ]
salePrice_house_age_lm$model[salePrice_base_lm$large_residuals, ]
salePrice_house_age_lm$model[salePrice_base_lm$large_residuals, c("cooks.distance","leverage","covariance.ratios")]
#salePrice_house_age_lm
salePrice_house_age_lm$model$standardized.residuals <- rstandard(salePrice_house_age_lm)
#salePrice_house_age_lm
salePrice_house_age_lm$model$standardized.residuals <- rstandard(salePrice_house_age_lm)
salePrice_house_age_lm$model$studentized.residuals <- rstudent(salePrice_house_age_lm)
salePrice_house_age_lm$model$cooks.distance <- cooks.distance(salePrice_house_age_lm)
salePrice_house_age_lm$model$dfbeta <- dfbeta(salePrice_house_age_lm)
salePrice_house_age_lm$model$dffit <- dffits(salePrice_house_age_lm)
salePrice_house_age_lm$model$leverage <- hatvalues(salePrice_house_age_lm)
salePrice_house_age_lm$model$covariance.ratios <- covratio(salePrice_house_age_lm)
salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("cooks.distance","leverage","covariance.ratios")]
salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("cooks.distance","leverage","covariance.ratios")]
### p292
### I think this is out casewise diagnostic
salePrice_base_lm$model$large_residuals <- salePrice_base_lm$standardized.residuals > 2 | salePrice_base_lm$standardized.residuals < -2
salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("cooks.distance","leverage","covariance.ratios")]
salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("cooks.distance")]
salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("cooks.distance") > 1 ]
salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("cooks.distance") ] > 1
sum( salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("cooks.distance") ] > 1 )
sum( salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("leverage") ] > average_leverage_2x_boundary )
average_leverage_3x_boundary <- average_leverage *3
sum( salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("leverage") ] > average_leverage_3x_boundary )
### These are outliers
sum( salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("leverage") ] > average_leverage_3x_boundary )
### These are troublesome
sum( salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("leverage") ] > average_leverage_2x_boundary )
###########################################
### Check covariance ratios for outliers
###########################################
sum( salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("covariance.ration") ] > upperCov )
###########################################
### Check covariance ratios for outliers
###########################################
sum( salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("covariance.ratio") ] > upperCov )
###########################################
### Check covariance ratios for outliers
###########################################
sum( salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("covariance.ratio") ] )
###########################################
### Check covariance ratios for outliers
###########################################
salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("covariance.ratio") ]
###########################################
### Check covariance ratios for outliers
###########################################
salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("covariance.ratios") ]
###########################################
### Check covariance ratios for outliers
###########################################
salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("covariance.ratios") ] > upperCov
###########################################
### Check covariance ratios for outliers
###########################################
sum(salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("covariance.ratios") ] > upperCov)
###########################################
### Check covariance ratios for outliers
###########################################
### Any Values of sum indicate outliers
sum(salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("covariance.ratios") ] > upperCov)
sum(salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("covariance.ratios") ] < lowerCov)
sum(salePrice_house_age_lm$model[salePrice_base_lm$model$covariance.ratios ] > upperCov)
salePrice_house_age_lm$model[salePrice_base_lm$model$covariance.ratios, ]
salePrice_house_age_lm$model$covariance.ratios
sum(salePrice_house_age_lm$model$covariance.ratios > upperCov)
sum(salePrice_house_age_lm$model$covariance.ratios < lowerCov)
sum(salePrice_house_age_lm$model$covariance.ratios > upperCov) & sum(salePrice_house_age_lm$model$covariance.ratios < lowerCov)
sum(salePrice_house_age_lm$model$covariance.ratios > upperCov) + sum(salePrice_house_age_lm$model$covariance.ratios < lowerCov)
