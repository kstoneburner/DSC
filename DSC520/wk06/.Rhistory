total_confirmed
state_df <- data.frame(date,total_confirmed,total_deaths,total_active_patients,total_active_icu)
state_df
### Build a list of Unique Dates
date <- unique(ca_covid_df$Most.Recent.Date)
daily_confirmed <- sapply(total_confirmed, function(x) total_confirmed[x-1],simplify = "array")
daily_confirmed
daily_confirmed <- sapply(total_confirmed, function(x) x,simplify = "array")
daily_confirmed
daily_confirmed <- sapply(total_confirmed, function(x) total_confirmed[x-1],simplify = "array")
daily_confirmed
daily_confirmed <- sapply(total_confirmed, function(x) total_confirmed[x+1] - total_confirmed[x],simplify = "array")
daily_confirmed
i <- 0
daily_confirmed <- sapply(total_confirmed, function(x) {
x
},simplify = "array")
daily_confirmed
total_confirmed[i]
daily_confirmed <- sapply(total_confirmed, function(x) {
i <<- i+1
total_confirmed[i]
},simplify = "array")
daily_confirmed
if (i > 0){
total_confirmed[i]
}
### Get the daily confirmed totals
### Outer counter, used for index
i <- 0
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i > 0){
total_confirmed[i]
}
},simplify = "array")
daily_confirmed
### Get the daily confirmed totals
### Outer counter, used for index
i <- 0
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i == 0 ){
total_confirmed[i]
}
},simplify = "array")
daily_confirmed
### Get the daily confirmed totals
### Outer counter, used for index
i <- 0
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i == 0 ){
total_confirmed[i]
}
else {
total_confirmed[i]
}
},simplify = "array")
daily_confirmed
### Get the daily confirmed totals
### Outer counter, used for index
i <- 0
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i == 0 ){
total_confirmed[i]
}
else {
total_confirmed[i] - total_confirmed[i-1]
}
},simplify = "array")
daily_confirmed
### Get the daily confirmed totals
### Outer counter, used for index
i <- 0
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i == 0 ){
x <- total_confirmed[i]
}
else {
x <- total_confirmed[i] - total_confirmed[i-1]
}
},simplify = "array")
daily_confirmed
### Get the daily confirmed totals
### Outer counter, used for index
i <- 0
daily_confirmed <- sapply(total_confirmed, function() {
### Increment the outer counter
i <<- i+1
if (i == 0 ){
return(total_confirmed[i])
}
else {
return(total_confirmed[i] - total_confirmed[i-1])
}
},simplify = "array")
### Get the daily confirmed totals
### Outer counter, used for index
i <- 0
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i == 0 ){
return(total_confirmed[i])
}
else {
return(total_confirmed[i] - total_confirmed[i-1])
}
},simplify = "array")
daily_confirmed
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i == 1 ){
return(total_confirmed[i])
}
else {
return(total_confirmed[i] - total_confirmed[i-1])
}
},simplify = "array")
### Get the daily confirmed totals
### Outer counter, used for index
i <- 0
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i == 1 ){
return(total_confirmed[i])
}
else {
return(total_confirmed[i] - total_confirmed[i-1])
}
},simplify = "array")
daily_confirmed
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i == 1 ){
return(0)
}
else {
return(total_confirmed[i] - total_confirmed[i-1])
}
},simplify = "array")
daily_confirmed
### Get the daily confirmed totals
### Outer counter, used for index
i <- 0
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i == 1 ){
return(0)
}
else {
return(total_confirmed[i] - total_confirmed[i-1])
}
},simplify = "array")
daily_confirmed
### Get the daily death totals
### Outer counter, used for index
i <- 0
daily_deaths <- sapply(total_deaths, function(x) {
### Increment the outer counter
i <<- i+1
### Daddy's First If Statement in R!
if (i == 1 ){
return(0)
}
else {
return(total_deaths[i] - total_deaths[i-1])
}
},simplify = "array")
daily_deaths
pairs(numeric_df)
numeric_df <- data.frame(total_confirmed,total_deaths,total_active_patients,total_active_icu,daily_confirmed)
pairs(numeric_df)
numeric_df <- data.frame(total_confirmed,daily_confirmed,total_deaths,daily_deaths,total_active_patients,total_active_icu)
pairs(numeric_df)
pairs(state_df)
state_df <- data.frame(date,total_confirmed,total_deaths,total_active_patients,total_active_icu)
pairs(state_df)
numeric_df <- data.frame(total_confirmed,daily_confirmed,total_deaths,daily_deaths,total_active_patients,total_active_icu)
pairs(numeric_df)
cor(total_confirmed,total_deaths)
summary(housing_df)
#setwd("C:\\Users\\newcomb\\DSCProjects\\DSC\\DSC520\\wk06")
setwd("L:\\stonk\\projects\\DSC\\DSC\\DSC520\\wk06")
library(QuantPsyc)
removeColsFromDF <- function(input_df, removeCols){
###########################################################################
### Remove Columns from a a data frame the Hard Way!
### I don't like the clever answers from the Internet that I don't quite
### Understand.
###########################################################################
### Purpose: Return a data frame without the columns listed in removeCols
###########################################################################
### Variables #############################################################
###########################################################################
### input_df: Data Frame that needs columns removed
### removeCols: Vector of columns names as strings to be removed:
###             Example: c("date","Location","col1","col2")
###########################################################################
### Build a new vector of names by excluding values in removeCols
newColNames <- lapply(colnames(input_df), function(x){
if ( (x %in% removeCols) == FALSE) {return(x)}
})
### Initialize output data frame with the first column from input.
### This allows us to cbind in the loop. The first column will be
### removed later
output_df = data.frame(input_df[1])
### Build output data frame by adding in columns from newColNames
### For each new column name
for (i in 1:length(newColNames)){
########################################################################################
### Build column name
########################################################################################
### Not exactly sure why I need to unlist.
### probably should use a different function from lapply. Maybe capply? But this works
########################################################################################
thisColName <- unlist(newColNames[i])
output_df <- cbind(output_df,input_df[thisColName])
}### END Each New Column Name
return(output_df)
}### END RemoveColsFromDF
## Load the housing data
raw_housing_df <- read.csv("week-7-housing.csv")
head(raw_housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"present_use"))[,-1]
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"sitetype",
"sale_warning",
"present_use",
"sale_reason",
"sale_instrument",
"Sale.Date"))[,-1]
#### Combine the bathrooms
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df <- cbind(housing_df,bath_total)
##########################################################################################################
#### Build house_age. This is the age of the house at Sale.
##########################################################################################################
#### Get Year build and coerce into a number
year_built <- as.numeric(raw_housing_df$year_built)
#### Coerce the Date into a Date value and return just the year
sale_year <- format(as.Date(raw_housing_df$Sale.Date, format="%m/%d/%Y"),"%Y")
#### Convert Date (year) into Date (number)
sale_year <- as.numeric(sale_year)
#### The difference between the sale_year and year_built. Is the dwellings age.
house_age <- (sale_year - year_built)
################################################################################################################################
#### There are negative number in house_age. Some sale_dates are listing as sold before the date of building.
#### I'm going to assume this is a data entry issue. Although there could be an issue where houses were actually sold before
#### they were built. A sampling of the sale dates all reference 2006, with multi-year differences in some cases.
#### I'm treating this as a data entry issue and converting all negative house_age values to 0.
################################################################################################################################
house_age <- vapply(house_age, function(x){
if (x < 0 ) { return(0)}
return(x)
},numeric(1))
housing_df <- cbind(housing_df,house_age)
summary(housing_df)
### b.
### base_lm: Predicts Sale Price based on lot lot size
salePrice_base_lm <-  lm(Sale.Price ~ sq_ft_lot, data=housing_df)
summary(salePrice_base_lm)
salePrice_naieve_lm <-  lm(Sale.Price ~ zip5 + bedrooms + bath_total + square_feet_total_living, data=housing_df)
summary(salePrice_naieve_lm)
salePrice_house_age_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bedrooms + bath_total + house_age, data=housing_df)
summary(salePrice_house_age_lm)
salePrice_year_built_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bedrooms + bath_total + year_built, data=housing_df)
summary(salePrice_year_built_lm)
lm.beta(salePrice_house_age_lm)
lm.beta(salePrice_year_built_lm)
summary(salePrice_year_built_lm)
salePrice_house_age_lm
salePrice_house_age_lm$model
salePrice_house_age_lm$model$Sale.Price
(val - mean(val)) / sd(val)
val <- salePrice_house_age_lm$model$Sale.Price
(val - mean(val)) / sd(val)
zScores <- val <- salePrice_house_age_lm$model$Sale.Price
max(zScores)
min(zScores)
se(val)
summary(val)
nrow(val)
nrow(val)
length(val)
standard_error <- sd(val) / sqrt(length(val))
standard_error
mean(val) - (min(val)*standard_error)
val
standard_error
sd(val)
min(val)
mean(val) - (min(val)*standard_error)
mean(val) - (max(val) * standard_error)
mean(val) - (1.96*standard_error)
mean(val) + (1.96 * standard_error)
?ci
housing_df$Sale.Date
?t.test()
t.test(val)
summary(salePrice_house_age_lm)
lm.beta(salePrice_house_age_lm)
mean(val)
t.test(val)
mean(val)
t.test(salePrice_house_age_lm$model)
salePrice_house_age_lm
str(salePrice_house_age_lm)
str(salePrice_house_age_lm$model)
t.test(salePrice_house_age_lm$model)
mean(salePrice_house_age_lm$model)
head(salePrice_house_age_lm$model)
t.test(salePrice_house_age_lm$model$square_feet_total_living )
t.test(salePrice_house_age_lm$model$SSale.Price )
t.test(salePrice_house_age_lm$model$SSale.Price )
t.test(salePrice_house_age_lm$model$SSale.Price)
t.test(salePrice_house_age_lm$model$Sale.Price)
value <- salePrice_house_age_lm$model$Sale.Price
### Calculate standard_error for value
standard_error <- sd(value) / sqrt(length(value))
standard_error
value <- salePrice_house_age_lm$model$Sale.Price
### Calculate standard_error for value
standard_error <- sd(value) / sqrt(length(value))
standard_error #3565.217
##lower Bound
mean(value) - (min(value)*standard_error)
##lower Bound
mean(value) - (max(value) * standard_error)
### Calculate standard_error for value
standard_error <- sd(value) / sqrt(length(value))
standard_error #3565.217
##lower Bound
mean(value) - (min(value)*standard_error)
##upper Bound
mean(value) + (max(value) * standard_error)
stat.desc(values)
library(pastecs)
stat.desc(values)
stat.desc(value)
mean(value)
min(value)
standard_error
min(value) * standard_error
mean(value)
mean(value) - min(value) * standard_error
t.test(value)
zScores <- (value - mean(value)) / sd(value)
aScores
zScores
### Calculate standard_error for value
standard_error <- sd(value) / sqrt(length(value))
standard_error #3565.217
##lower Bound
mean(value) - (min(zScores)*standard_error)
##upper Bound
mean(value) + (max(zScores) * standard_error)
t.test(value)
standard_error <- sd(zScores) / sqrt(length(zScores))
standard_error #3565.217
mean(value) - min(value) * standard_error
##lower Bound
mean(value) - (min(zScores)*standard_error)
##upper Bound
mean(value) + (max(zScores) * standard_error)
min(zScores)
max(zScores)
max(zScores) * sd(value)
min(zScores)* sd(value)
max(zScores) * sd(value) + mean(value)
min(zScores)* sd(value) - mean(value)
##lower Bound
mean(value) - (min(zScores)*standard_error)
##upper Bound
mean(value) + (max(zScores) * standard_error)
### Calculate standard_error for value
standard_error <- sd(value) / sqrt(length(value))
##lower Bound
mean(value) - (min(zScores)*standard_error)
##upper Bound
mean(value) + (max(zScores) * standard_error)
t.test(value)
##lower Bound
mean(value) - (min(zScores)*standard_error) * .95
##upper Bound
mean(value) + (max(zScores) * standard_error) *.95
min(zScores)
##lower Bound
mean(value) - (1.96*standard_error)
##upper Bound
mean(value) + (1.96 * standard_error) *.95
##upper Bound
mean(value) + (1.96 * standard_error)
tail(housing_df)
t.test(housing_df$Sale.Price)
t.test(salePrice_house_age_lm$model$Sale.Price)
t.test(housing_df$building_grade)
t.test(raw_housing_df$sq_ft_lot)
tail(housing_df)
t.test(housing_df$square_feet_total_living)
t.test(housing_df$bedrooms)
t.test(housing_df$bathrooms)
t.test(housing_df$bath_total)
t.test(housing_df$house_age)
t.test(housing_df$year_built)
function(housing_df)
housing_df$year_built
anova(salePrice_base_lm,salePrice_house_age_lm)
anova(salePrice_base_lm,salePrice_house_age_lm)
anova(salePrice_base_lm,salePrice_year_built_lm)
anova(salePrice_base_lm,salePrice_naieve_lm)
salePrice_naieve_lm <-  lm(Sale.Price ~ zip5 + bedrooms + bath_total + square_feet_total_living, data=housing_df)
anova(salePrice_base_lm,salePrice_naieve_lm)
anova(salePrice_base_lm,salePrice_naieve_lm)
anova(salePrice_base_lm,salePrice_house_age_lm)
anova(salePrice_base_lm,salePrice_year_built_lm)
anova(salePrice_base_lm,salePrice_house_age_lm,salePrice_year_built_lm)
anova(salePrice_base_lm,salePrice_year_built_lm,salePrice_house_age_lm)
anova(salePrice_base_lm,salePrice_naieve_lm)
summary(salePrice_base_lm)
summary(salePrice_naieve_lm)
t.test(salePrice_naieve_lm)
t.test(salePrice_naieve_lm$model)
t.test(salePrice_base_lm$model)
t.test(salePrice_naieve_lm$model)
t.test(salePrice_base_lm$model)
t.test(salePrice_naieve_lm$model)
t.test(salePrice_house_age_lm$model)
t.test(salePrice_year_built_lm$model)
anova(salePrice_base_lm,salePrice_naieve_lm)
anova(salePrice_base_lm,salePrice_house_age_lm)
anova(salePrice_base_lm,salePrice_year_built_lm)
anova(salePrice_base_lm,salePrice_house_age_lm,salePrice_year_built_lm)
anova(salePrice_base_lm,salePrice_year_built_lm,salePrice_house_age_lm)
anova(salePrice_base_lm,salePrice_house_age_lm)
anova(salePrice_base_lm,salePrice_year_built_lm)
anova(salePrice_base_lm,salePrice_house_age_lm,salePrice_year_built_lm)
### b.
### base_lm: Predicts Sale Price based on lot lot size
salePrice_base_lm <-  lm(Sale.Price ~ sq_ft_lot, data=housing_df)
tail(housing_df)
cor(houing_df[1,])
cor(houding_df[1,])
cor(housing_df[1,])
cor(housing_df)[1,]
salePrice_living_lm <- lm(Sale.Price ~ square_feet_total_living, data=housing_df)
summary(salePrice_base_lm)
salePrice_living_lm <- lm(Sale.Price ~ square_feet_total_living, data=housing_df)
summary(salePrice_living_lm)
anova(salePrice_base_lm,square_feet_total_living)
anova(salePrice_base_lm,salePrice_living_lm)
anova(salePrice_base_lm,salePrice_naieve_lm)
anova(salePrice_base_lm,salePrice_living_lm)
anova(salePrice_base_lm,salePrice_house_age_lm)
anova(salePrice_base_lm,salePrice_naieve_lm)
anova(salePrice_base_lm,salePrice_living_lm)
anova(salePrice_base_lm,salePrice_house_age_lm)
anova(salePrice_base_lm,salePrice_year_built_lm)
anova(salePrice_base_lm,salePrice_house_age_lm,salePrice_year_built_lm)
anova(salePrice_base_lm,salePrice_year_built_lm,salePrice_house_age_lm)
cor(housing_df)[1,]
anova(salePrice_base_lm,salePrice_naieve_lm)
anova(salePrice_base_lm,salePrice_naieve_lm)
anova(salePrice_base_lm,salePrice_naieve_lm)
anova(salePrice_base_lm,salePrice_living_lm)
anova(salePrice_base_lm,salePrice_house_age_lm)
anova(salePrice_base_lm,salePrice_naieve_lm)
anova(salePrice_base_lm,salePrice_living_lm)
anova(salePrice_base_lm,salePrice_house_age_lm)
anova(salePrice_base_lm,salePrice_year_built_lm)
anova(salePrice_base_lm,salePrice_house_age_lm,salePrice_year_built_lm)
lm.beta(salePrice_house_age_lm)
summary(salePrice_house_age_lm)
summary(salePrice_base_lm)
lm.beta(salePrice_house_age_lm)
summary(salePrice_naieve_lm)
salePrice_house_age_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bedrooms + bath_total + house_age, data=housing_df)
summary(salePrice_house_age_lm)
salePrice_year_built_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bedrooms + bath_total + year_built, data=housing_df)
