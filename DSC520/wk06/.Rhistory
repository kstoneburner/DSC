tinytex::install_tinytex()
tinytex::install_tinytex()
#tinytex::install_tinytex()
tinytex:::is_tinytex()
for(i in datefactor)q
library(ggplot2)
library(pastecs)
covidRootPath <- "L:\\stonk\\projects\\DSC\\DSC\\covid\\"
caCovidPath <- "ca_covid_cases.csv"
cdcDeathsPath <- "cdcMortality.csv"
ca_covid_filePath <- paste(covidRootPath,caCovidPath,sep="")
ca_covid_filePath
ca_covid_df <- read.csv(ca_covid_filePath)
### Convert Date to a Date object
ca_covid_df$Most.Recent.Date <- as.Date(ca_covid_df$Most.Recent.Date,"%m/%d/%y")
head(ca_covid_df)
ca_covid_df$Total.Count.Deaths
la_df <- ca_covid_df [ which( ca_covid_df$County.Name == "Los Angeles"), ]
sf_df <- ca_covid_df [ which( ca_covid_df$County.Name == "San Francisco"), ]
sf_df
alameda_df <- ca_covid_df [ which( ca_covid_df$County.Name == "Alameda"), ]
alameda_df
datefactor <- unique(ca_covid_df$Most.Recent.Date)
datefactor[1]
oneDay <- ca_covid_df [ which( ca_covid_df$Most.Recent.Date == datefactor[1]), ]$Total.Count.Confirmed
oneDay
sum(oneDay,na.rm = TRUE)
oneDay <- lapply(datefactor, function(x) sum(ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$Total.Count.Confirmed))
oneDay
date <- datefactor
state_df <- data.frame(date)
state_df
total_confirmed <- lapply(datefactor, function(x) sum(ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$Total.Count.Confirmed))
state_df <- data.frame(date,total_confirmed)
state_df
total_confirmed
total_confirmed
str(total_confirmed)
total_confirmed <- c(lapply(datefactor, function(x) sum(ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$Total.Count.Confirmed)))
total_confirmed
head(total_confirmed)
total_confirmed <- lapply(datefactor, function(x) (ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$Total.Count.Confirmed))
total_confirmed
str(total_confirmed)
total_confirmed <- vapply(datefactor, function(x) (ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$Total.Count.Confirmed))
?vaply
?vapply
total_confirmed <- lapply(datefactor, function(x) (ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$Total.Count.Confirmed),),simplify = "array"
total_confirmed <- lapply(datefactor, function(x) (ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$Total.Count.Confirmed),),simplify = "array"
total_confirmed <- lapply(datefactor, function(x) (ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$Total.Count.Confirmed),simplify = "array")
total_confirmed <- lapply(datefactor, function(x) ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$Total.Count.Confirmed),simplify = "array"
total_confirmed <- lapply(datefactor, function(x) ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$Total.Count.Confirmed)
total_confirmed
str(total_confirmed)
total_confirmed <- sapply(datefactor, function(x) ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$Total.Count.Confirmed)
total_confirmed
str(total_confirmed)
total_confirmed <- sapply(datefactor, function(x) ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$Total.Count.Confirmed), simplify = TRUE
total_confirmed <- sapply(datefactor, function(x) ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$Total.Count.Confirmed, simplify = TRUE)
total_confirmed
str(total_confirmed)
total_confirmed <- sapply(datefactor, function(x) ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$Total.Count.Confirmed, simplify = "array")
total_confirmed
str(total_confirmed)
total_confirmed <- sapply(datefactor, function(x) sum(ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x)), ]$Total.Count.Confirmed, simplify = "array")
total_confirmed <- sapply(datefactor, function(x) sum(ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$Total.Count.Confirmed), simplify = "array")
total_confirmed
str(total_confirmed)
head(total_confirmed)
class(total_confirmed)
date <- datefactor
state_df <- data.frame(date,total_confirmed)
state_df
total_confirmed <- sapply(datefactor, function(x) sum(ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$Total.Count.Confirmed),na.rm = TRUE, simplify = "array")
total_confirmed <- sapply(datefactor, function(x) sum(ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$Total.Count.Confirmed,na.rm = TRUE), simplify = "array")
total_confirmed
str(total_confirmed)
head(total_confirmed)
class(total_confirmed)
date <- datefactor
state_df <- data.frame(date,total_confirmed)
state_df
head(ca_covid_df)
total_deaths <- sapply(datefactor, function(x) sum(ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$Total.Count.Deaths,na.rm = TRUE), simplify = "array")
total_deaths
total_positive_patients <- sapply(datefactor, function(x) sum(ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$COVID.19.Positive.Patients,na.rm = TRUE), simplify = "array")
total_suspected_patients <- sapply(datefactor, function(x) sum(ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$Suspected.COVID.19.Positive.Patients,na.rm = TRUE), simplify = "array")
total_suspected_patients
total_positive_patients
total_combined_patients = total_suspected_patients + total_positive_patients
total_combined_patients
total_suspected_patients
total_positive_patients
total_combined_patients = total_suspected_patients + total_positive_patients
total_combined_patients
total_active_patients = total_suspected_patients + total_positive_patients
total_active_patients
total_positive_icu <- sapply(datefactor, function(x) sum(ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$ICU.COVID.19.Positive.Patients,na.rm = TRUE), simplify = "array")
total_suspected_icu <- sapply(datefactor, function(x) sum(ca_covid_df [ which( ca_covid_df$Most.Recent.Date == x), ]$ICU.COVID.19.Suspected.Patients,na.rm = TRUE), simplify = "array")
total_active_icu = total_positive_icu + total_suspected_icu
total_active_icu
sum(total_active_patients)
total_confirmed
state_df <- data.frame(date,total_confirmed,total_deaths,total_active_patients,total_active_icu)
state_df
### Build a list of Unique Dates
date <- unique(ca_covid_df$Most.Recent.Date)
daily_confirmed <- sapply(total_confirmed, function(x) total_confirmed[x-1],simplify = "array")
daily_confirmed
daily_confirmed <- sapply(total_confirmed, function(x) x,simplify = "array")
daily_confirmed
daily_confirmed <- sapply(total_confirmed, function(x) total_confirmed[x-1],simplify = "array")
daily_confirmed
daily_confirmed <- sapply(total_confirmed, function(x) total_confirmed[x+1] - total_confirmed[x],simplify = "array")
daily_confirmed
i <- 0
daily_confirmed <- sapply(total_confirmed, function(x) {
x
},simplify = "array")
daily_confirmed
total_confirmed[i]
daily_confirmed <- sapply(total_confirmed, function(x) {
i <<- i+1
total_confirmed[i]
},simplify = "array")
daily_confirmed
if (i > 0){
total_confirmed[i]
}
### Get the daily confirmed totals
### Outer counter, used for index
i <- 0
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i > 0){
total_confirmed[i]
}
},simplify = "array")
daily_confirmed
### Get the daily confirmed totals
### Outer counter, used for index
i <- 0
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i == 0 ){
total_confirmed[i]
}
},simplify = "array")
daily_confirmed
### Get the daily confirmed totals
### Outer counter, used for index
i <- 0
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i == 0 ){
total_confirmed[i]
}
else {
total_confirmed[i]
}
},simplify = "array")
daily_confirmed
### Get the daily confirmed totals
### Outer counter, used for index
i <- 0
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i == 0 ){
total_confirmed[i]
}
else {
total_confirmed[i] - total_confirmed[i-1]
}
},simplify = "array")
daily_confirmed
### Get the daily confirmed totals
### Outer counter, used for index
i <- 0
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i == 0 ){
x <- total_confirmed[i]
}
else {
x <- total_confirmed[i] - total_confirmed[i-1]
}
},simplify = "array")
daily_confirmed
### Get the daily confirmed totals
### Outer counter, used for index
i <- 0
daily_confirmed <- sapply(total_confirmed, function() {
### Increment the outer counter
i <<- i+1
if (i == 0 ){
return(total_confirmed[i])
}
else {
return(total_confirmed[i] - total_confirmed[i-1])
}
},simplify = "array")
### Get the daily confirmed totals
### Outer counter, used for index
i <- 0
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i == 0 ){
return(total_confirmed[i])
}
else {
return(total_confirmed[i] - total_confirmed[i-1])
}
},simplify = "array")
daily_confirmed
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i == 1 ){
return(total_confirmed[i])
}
else {
return(total_confirmed[i] - total_confirmed[i-1])
}
},simplify = "array")
### Get the daily confirmed totals
### Outer counter, used for index
i <- 0
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i == 1 ){
return(total_confirmed[i])
}
else {
return(total_confirmed[i] - total_confirmed[i-1])
}
},simplify = "array")
daily_confirmed
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i == 1 ){
return(0)
}
else {
return(total_confirmed[i] - total_confirmed[i-1])
}
},simplify = "array")
daily_confirmed
### Get the daily confirmed totals
### Outer counter, used for index
i <- 0
daily_confirmed <- sapply(total_confirmed, function(x) {
### Increment the outer counter
i <<- i+1
if (i == 1 ){
return(0)
}
else {
return(total_confirmed[i] - total_confirmed[i-1])
}
},simplify = "array")
daily_confirmed
### Get the daily death totals
### Outer counter, used for index
i <- 0
daily_deaths <- sapply(total_deaths, function(x) {
### Increment the outer counter
i <<- i+1
### Daddy's First If Statement in R!
if (i == 1 ){
return(0)
}
else {
return(total_deaths[i] - total_deaths[i-1])
}
},simplify = "array")
daily_deaths
pairs(numeric_df)
numeric_df <- data.frame(total_confirmed,total_deaths,total_active_patients,total_active_icu,daily_confirmed)
pairs(numeric_df)
numeric_df <- data.frame(total_confirmed,daily_confirmed,total_deaths,daily_deaths,total_active_patients,total_active_icu)
pairs(numeric_df)
pairs(state_df)
state_df <- data.frame(date,total_confirmed,total_deaths,total_active_patients,total_active_icu)
pairs(state_df)
numeric_df <- data.frame(total_confirmed,daily_confirmed,total_deaths,daily_deaths,total_active_patients,total_active_icu)
pairs(numeric_df)
cor(total_confirmed,total_deaths)
cor(housing_df)[1,]
# Assignment: 6.1 - Housing Data
# Name: Stoneburner, Kurt
# Date: 2020-07-06
removeColsFromDF <- function(input_df, removeCols){
###########################################################################
### Remove Columns from a a data frame the Hard Way!
### I don't like the clever answers from the Internet that I don't quite
### Understand.
###########################################################################
### Purpose: Return a data frame without the columns listed in removeCols
###########################################################################
### Variables #############################################################
###########################################################################
### input_df: Data Frame that needs columns removed
### removeCols: Vector of columns names as strings to be removed:
###             Example: c("date","Location","col1","col2")
###########################################################################
### Build a new vector of names by excluding values in removeCols
newColNames <- lapply(colnames(input_df), function(x){
if ( (x %in% removeCols) == FALSE) {return(x)}
})
### Initialize output data frame with the first column from input.
### This allows us to cbind in the loop. The first column will be
### removed later
output_df = data.frame(input_df[1])
### Build output data frame by adding in columns from newColNames
### For each new column name
for (i in 1:length(newColNames)){
########################################################################################
### Build column name
########################################################################################
### Not exactly sure why I need to unlist.
### probably should use a different function from lapply. Maybe capply? But this works
########################################################################################
thisColName <- unlist(newColNames[i])
output_df <- cbind(output_df,input_df[thisColName])
}### END Each New Column Name
return(output_df)
}### END RemoveColsFromDF
#setwd("C:\\Users\\newcomb\\DSCProjects\\DSC\\DSC520\\wk06")
setwd("L:\\stonk\\projects\\DSC\\DSC\\DSC520\\wk06")
## Load the housing data
raw_housing_df <- read.csv("week-7-housing.csv")
head(raw_housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"present_use"))[,-1]
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"sitetype",
"sale_warning",
"present_use",
"sale_reason",
"sale_instrument",
"Sale.Date"))[,-1]
#### Combine the bathrooms
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df <- cbind(housing_df,bath_total)
tail(housing_df)
cor(housing_df)[1,]
print(cor(housing_df)[1,])
salePrice_complex_4_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bath_total, data=housing_df)
summary(salePrice_complex_4_lm)
salePrice_complex_5_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bedrooms + bath_total + house_age, data=housing_df)
# Assignment: 6.1 - Housing Data
# Name: Stoneburner, Kurt
# Date: 2020-07-06
removeColsFromDF <- function(input_df, removeCols){
###########################################################################
### Remove Columns from a a data frame the Hard Way!
### I don't like the clever answers from the Internet that I don't quite
### Understand.
###########################################################################
### Purpose: Return a data frame without the columns listed in removeCols
###########################################################################
### Variables #############################################################
###########################################################################
### input_df: Data Frame that needs columns removed
### removeCols: Vector of columns names as strings to be removed:
###             Example: c("date","Location","col1","col2")
###########################################################################
### Build a new vector of names by excluding values in removeCols
newColNames <- lapply(colnames(input_df), function(x){
if ( (x %in% removeCols) == FALSE) {return(x)}
})
### Initialize output data frame with the first column from input.
### This allows us to cbind in the loop. The first column will be
### removed later
output_df = data.frame(input_df[1])
### Build output data frame by adding in columns from newColNames
### For each new column name
for (i in 1:length(newColNames)){
########################################################################################
### Build column name
########################################################################################
### Not exactly sure why I need to unlist.
### probably should use a different function from lapply. Maybe capply? But this works
########################################################################################
thisColName <- unlist(newColNames[i])
output_df <- cbind(output_df,input_df[thisColName])
}### END Each New Column Name
return(output_df)
}### END RemoveColsFromDF
#setwd("C:\\Users\\newcomb\\DSCProjects\\DSC\\DSC520\\wk06")
setwd("L:\\stonk\\projects\\DSC\\DSC\\DSC520\\wk06")
## Load the housing data
raw_housing_df <- read.csv("week-7-housing.csv")
head(raw_housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"present_use"))[,-1]
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"sitetype",
"sale_warning",
"present_use",
"sale_reason",
"sale_instrument",
"Sale.Date"))[,-1]
#### Combine the bathrooms
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df <- cbind(housing_df,bath_total)
tail(housing_df)
cor(housing_df)[1,]
### Calculate the age of the house (Sale Date - sale_year)
cor(housing_df)[1,]
### b.
### base_lm: Predicts Sale Price based on lot lot size
salePrice_base_lm <-  lm(Sale.Price ~ sq_ft_lot, data=housing_df)
summary(salePrice_base_lm)
salePrice_naieve_lm <-  lm(Sale.Price ~ zip5 + bedrooms + bath_total + square_feet_total_living, data=housing_df)
summary(salePrice_naieve_lm)
salePrice_complex_4_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bath_total, data=housing_df)
summary(salePrice_complex_4_lm)
salePrice_complex_5_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bedrooms + bath_total + house_age, data=housing_df)
summary(salePrice_complex_5_lm)
salePrice_complex_6_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bedrooms + bath_total + year_built, data=housing_df)
summary(salePrice_complex_6_lm)
### b.
### base_lm: Predicts Sale Price based on lot lot size
salePrice_base_lm <-  lm(Sale.Price ~ sq_ft_lot, data=housing_df)
summary(salePrice_base_lm)
salePrice_naieve_lm <-  lm(Sale.Price ~ zip5 + bedrooms + bath_total + square_feet_total_living, data=housing_df)
summary(salePrice_naieve_lm)
salePrice_complex_4_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bath_total, data=housing_df)
summary(salePrice_complex_4_lm)
salePrice_complex_5_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bedrooms + bath_total + house_age, data=housing_df)
summary(salePrice_complex_5_lm)
salePrice_naieve_lm <-  lm(Sale.Price ~ zip5 + bedrooms + bath_total + square_feet_total_living, data=housing_df)
summary(salePrice_naieve_lm)
salePrice_complex_4_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bath_total, data=housing_df)
summary(salePrice_complex_4_lm)
salePrice_complex_6_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bedrooms + bath_total + year_built, data=housing_df)
summary(salePrice_complex_6_lm)
unique(bath_total)
hist(bath_total)
plot(bath_total,housing_df$Sale.Price)
plot(raw_housing_df$bath_full_count,housing_df$Sale.Price)
plot(bath_total,housing_df$Sale.Price)
summary(raw_housing_df$bath_full_count)
summary(bath_total)
cor(housing_df$Sale.Price,IQR(bath_total))
cor(IQR(housing_df$Sale.Price),IQR(bath_total))
iqr_dumper_df <- housing_df[which(housing_df$bath_total < 2.750),]
iqr_dumper_df <- iqr_dumper_df[which(iqr_dumper_df$bath_total > 2.25),]
cor(iqr_dumper_df)[1,]
cor(iqr_dumper_df)[1,]
nrows(iqr_dumper_df)
nrow(iqr_dumper_df)
iqr_dumper_df <- housing_df[which(housing_df$bath_total <= 5),]
iqr_dumper_df <- housing_df[which(housing_df$bath_total <= 5),]
iqr_dumper_df <- iqr_dumper_df[which(iqr_dumper_df$bath_total > 1),]
cor(iqr_dumper_df)[1,]
plot(iqr_dumper_df$bath_total,iqr_dumper_df$Sale.Price)
