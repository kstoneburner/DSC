geom_line(color='red'   ,data = adjusted_predict_df, aes(y=daily_total_confirmed, x=daily_total_deaths))
cor(coded_zoning,raw_housing_df$present_use)
# Assignment: 6.1 - Housing Data
# Name: Stoneburner, Kurt
# Date: 2020-07-06
removeColsFromDF <- function(input_df, removeCols){
###########################################################################
### Remove Columns from a a data frame the Hard Way!
### I don't like the clever answers from the Internet that I don't quite
### Understand.
###########################################################################
### Purpose: Return a data frame without the columns listed in removeCols
###########################################################################
### Variables #############################################################
###########################################################################
### input_df: Data Frame that needs columns removed
### removeCols: Vector of columns names as strings to be removed:
###             Example: c("date","Location","col1","col2")
###########################################################################
### Build a new vector of names by excluding values in removeCols
newColNames <- lapply(colnames(input_df), function(x){
if ( (x %in% removeCols) == FALSE) {return(x)}
})
### Initialize output data frame with the first column from input.
### This allows us to cbind in the loop. The first column will be
### removed later
output_df = data.frame(input_df[1])
### Build output data frame by adding in columns from newColNames
### For each new column name
for (i in 1:length(newColNames)){
########################################################################################
### Build column name
########################################################################################
### Not exactly sure why I need to unlist.
### probably should use a different function from lapply. Maybe capply? But this works
########################################################################################
thisColName <- unlist(newColNames[i])
output_df <- cbind(output_df,input_df[thisColName])
}### END Each New Column Name
return(output_df)
}### END RemoveColsFromDF
setwd("C:\\Users\\newcomb\\DSCProjects\\DSC\\DSC520\\wk06")
#setwd("C:\\Users\\newcomb\\DSCProjects\\DSC\\DSC520\\wk06")
setwd("L:\\stonk\\projects\\DSC\\DSC\\DSC520\\wk06")
## Load the housing data
raw_housing_df <- read.csv("week-7-housing.csv")
housing_df <- removeColsFromDF(raw_housing_df,c("lon","lat","addr_full","ctyname","postalctyn","prop_type"))
head(housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon","lat","addr_full","ctyname","postalctyn","prop_type","year_renovated "))
head(housing_df)
## Load the housing data
raw_housing_df <- read.csv("week-7-housing.csv")
housing_df <- removeColsFromDF(raw_housing_df,c("lon","lat","addr_full","ctyname","postalctyn","prop_type","year_renovated "))
head(housing_df)
# Assignment: 6.1 - Housing Data
# Name: Stoneburner, Kurt
# Date: 2020-07-06
removeColsFromDF <- function(input_df, removeCols){
###########################################################################
### Remove Columns from a a data frame the Hard Way!
### I don't like the clever answers from the Internet that I don't quite
### Understand.
###########################################################################
### Purpose: Return a data frame without the columns listed in removeCols
###########################################################################
### Variables #############################################################
###########################################################################
### input_df: Data Frame that needs columns removed
### removeCols: Vector of columns names as strings to be removed:
###             Example: c("date","Location","col1","col2")
###########################################################################
### Build a new vector of names by excluding values in removeCols
newColNames <- lapply(colnames(input_df), function(x){
if ( (x %in% removeCols) == FALSE) {return(x)}
})
### Initialize output data frame with the first column from input.
### This allows us to cbind in the loop. The first column will be
### removed later
output_df = data.frame(input_df[1])
### Build output data frame by adding in columns from newColNames
### For each new column name
for (i in 1:length(newColNames)){
########################################################################################
### Build column name
########################################################################################
### Not exactly sure why I need to unlist.
### probably should use a different function from lapply. Maybe capply? But this works
########################################################################################
thisColName <- unlist(newColNames[i])
output_df <- cbind(output_df,input_df[thisColName])
}### END Each New Column Name
return(output_df)
}### END RemoveColsFromDF
#setwd("C:\\Users\\newcomb\\DSCProjects\\DSC\\DSC520\\wk06")
setwd("L:\\stonk\\projects\\DSC\\DSC\\DSC520\\wk06")
## Load the housing data
raw_housing_df <- read.csv("week-7-housing.csv")
housing_df <- removeColsFromDF(raw_housing_df,c("lon","lat","addr_full","ctyname","postalctyn","prop_type","year_renovated "))
head(housing_df)
head(housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon","lat","addr_full","ctyname","postalctyn","prop_type","year_renovated ","current_zoning"))
head(housing_df)
tail(raw_housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon","lat","addr_full","ctyname","postalctyn","prop_type","year_renovated ","current_zoning"))
head(housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon","lat","addr_full","ctyname","postalctyn","prop_type","year_renovated","current_zoning"))
head(housing_df)
unique(raw_housing_df$present_use)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"present_use"))
head(housing_df)
## Load the housing data
raw_housing_df <- read.csv("week-7-housing.csv")
## Remove the double date first column from CSV
raw_housing_df <- raw_housing_df[2:length(raw_housing_df)]
tail(raw_housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"present_use"))
head(housing_df)
## Remove the double date first column from CSV
raw_housing_df <- raw_housing_df[2:length(colnames(raw_housing_df))]
tail(raw_housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"present_use"))
head(housing_df)
head(housing_df)
str(housing_df)
## Load the housing data
raw_housing_df <- read.csv("week-7-housing.csv")
tail(raw_housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"present_use"))
head(housing_df)
housing_df[1,]
housing_df[-1,]
housing_df[,-1]
## Load the housing data
raw_housing_df <- read.csv("week-7-housing.csv")[,-1]
tail(raw_housing_df)
head(housing_df)
str(housing_df)
## Load the housing data
raw_housing_df <- read.csv("week-7-housing.csv")[,-1]
tail(raw_housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"present_use"))
head(housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"present_use"))[-1]
head(housing_df)
?capply
?vapply
#### Combine the bathrooms
total_bathrooms <- vapply(housing_df, function(x){
full_bath <- x$bath_full_count
half_bath <- x$bath_half_count
qtr_bath <- x$bath_3qtr_count
print(full_bath)
},numeric(1))
#### Combine the bathrooms
total_bathrooms <- vapply(housing_df, function(x){
full_bath <- x$bath_full_count
half_bath <- x$bath_half_count
qtr_bath <- x$bath_3qtr_count
print(full_bath)
return(x)
},numeric(1))
print(x)
#### Combine the bathrooms
total_bathrooms <- vapply(housing_df, function(x){
#full_bath <- x$bath_full_count
#half_bath <- x$bath_half_count
#qtr_bath <- x$bath_3qtr_count
print(x)
return(x)
},numeric(1))
housing_df$bath_half_count
housing_df$bath_half_count *.5
housing_df$bath_3qtr_count *.75
housing_df$bath_full_count + (housing_df$bath_half_count *.5) + (housing_df$bath_3qtr_count *.75)
#### Combine the bathrooms
total_bath <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"present_use"))[-1]
head(housing_df)
#### Combine the bathrooms
total_bath <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
#### Combine the bathrooms
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df[bath_total] <- bath_total
head(housing_df)
housing_df <- cbind(housing_df,bath_total)
head(housing_df)
tail(raw_housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"present_use"))
#### Combine the bathrooms
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df <- cbind(housing_df,bath_total)
head(housing_df)
tail(raw_housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"present_use"))
#### Combine the bathrooms
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df <- cbind(housing_df,bath_total)
head(housing_df)
tail(raw_housing_df)
## Load the housing data
raw_housing_df <- read.csv("week-7-housing.csv")[,-1]
tail(raw_housing_df)
head(raw_housing_df)
# Assignment: 6.1 - Housing Data
# Name: Stoneburner, Kurt
# Date: 2020-07-06
removeColsFromDF <- function(input_df, removeCols){
###########################################################################
### Remove Columns from a a data frame the Hard Way!
### I don't like the clever answers from the Internet that I don't quite
### Understand.
###########################################################################
### Purpose: Return a data frame without the columns listed in removeCols
###########################################################################
### Variables #############################################################
###########################################################################
### input_df: Data Frame that needs columns removed
### removeCols: Vector of columns names as strings to be removed:
###             Example: c("date","Location","col1","col2")
###########################################################################
### Build a new vector of names by excluding values in removeCols
newColNames <- lapply(colnames(input_df), function(x){
if ( (x %in% removeCols) == FALSE) {return(x)}
})
### Initialize output data frame with the first column from input.
### This allows us to cbind in the loop. The first column will be
### removed later
output_df = data.frame(input_df[1])
### Build output data frame by adding in columns from newColNames
### For each new column name
for (i in 1:length(newColNames)){
########################################################################################
### Build column name
########################################################################################
### Not exactly sure why I need to unlist.
### probably should use a different function from lapply. Maybe capply? But this works
########################################################################################
thisColName <- unlist(newColNames[i])
output_df <- cbind(output_df,input_df[thisColName])
}### END Each New Column Name
return(output_df)
}### END RemoveColsFromDF
#setwd("C:\\Users\\newcomb\\DSCProjects\\DSC\\DSC520\\wk06")
setwd("L:\\stonk\\projects\\DSC\\DSC\\DSC520\\wk06")
## Load the housing data
raw_housing_df <- read.csv("week-7-housing.csv")[,-1]
head(raw_housing_df)
## Load the housing data
raw_housing_df <- read.csv("week-7-housing.csv")
head(raw_housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"present_use"))
#### Combine the bathrooms
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df <- cbind(housing_df,bath_total)
head(housing_df)
str(housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"present_use"))[,-1]
#### Combine the bathrooms
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df <- cbind(housing_df,bath_total)
head(housing_df)
housing_df$Sale.Date <- as.Date(housing_df$Sale.Date)
head(housing_df)
?as.date
?as.date
?as.Date
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"present_use"))[,-1]
#### Combine the bathrooms
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df <- cbind(housing_df,bath_total)
housing_df$Sale.Date <- as.Date(housing_df$Sale.Date, tryFormats = c("M/D/YYYY") )
head(housing_df)
housing_df$Sale.Date <- as.Date(housing_df$Sale.Date, tryFormats = c("MM/DD/YYYY") )
housing_df$Sale.Date <- as.Date(housing_df$Sale.Date, tryFormats = c("m/d/Y") )
housing_df$Sale.Date <- as.Date(housing_df$Sale.Date, tryFormats = c("%m/%d/%Y") )
head(housing_df)
housing_df$year_built - housing_df$Sale.Date
housing_df$year_built <- as.Date(housing_df$year_built, tryFormats = c("%Y"))
housing_df$year_built <- as.Date(housing_df$year_built, tryFormats = c("%Y"))
housing_df$bath_full_count + (housing_df$bath_half_count *.5) + (housing_df$bath_3qtr_count *.75)
housing_df$year_built <- as.Date(housing_df$year_built, tryFormats = c("%Y")       )
whole_year_built <- vapply(housing_df$year_built, function(x){},numeric(1))
whole_year_built
whole_year_built <- vapply(housing_df$year_built, function(x){return(x)},numeric(1))
whole_year_built
whole_year_built <- vapply(housing_df$year_built, function(x){return(paste0("1/1/",x))},numeric(1))
whole_year_built <- vapply(housing_df$year_built, function(x){return(chr(paste0("1/1/",x)))},numeric(1))
whole_year_built <- vapply(housing_df$year_built, function(x){return(as.numeric(paste0("1/1/",x)))},numeric(1))
whole_year_built
?as.numeric
?strtoi
whole_year_built <- vapply(housing_df$year_built, function(x){return(strtoi(paste0("1/1/",x)))},numeric(1))
whole_year_built
whole_year_built <- vapply(housing_df$year_built, function(x){return(strtoi(paste0("1/1/",x)))},date(1))
whole_year_built <- vapply(housing_df$year_built, function(x){return(strtoi(paste0("1/1/",x)))},date())
whole_year_built <- vapply(housing_df$year_built, function(x){
return( as.Date( paste0("1/1/",x), tryFormats=c("%m/%d/%Y") ) )
},date())
return( as.Date( paste0("1/1/",x), tryFormats=c("%m/%d/%Y") ) )
whole_year_built <- sapply(housing_df$year_built, function(x){
thisDate <- paste0("1/1/",x)
thisDate <- as.Date( thisDate, tryFormats=c("%m/%d/%Y") )
return ( thisDate  )
}, simplify = "array")
whole_year_built
whole_year_built <- lapply(housing_df$year_built, function(x){
thisDate <- paste0("1/1/",x)
thisDate <- as.Date( thisDate, tryFormats=c("%m/%d/%Y") )
return ( thisDate  )
}, simplify = "array")
whole_year_built
whole_year_built <- lapply(housing_df$year_built, function(x){
thisDate <- paste0("1/1/",x)
thisDate <- as.Date( thisDate, tryFormats=c("%m/%d/%Y") )
print(thisDate)
return ( thisDate  )
}, simplify = "array")
whole_year_built <- sapply(housing_df$year_built, function(x){
thisDate <- paste0("1/1/",x)
thisDate <- as.Date( thisDate, tryFormats=c("%m/%d/%Y") )
print(thisDate)
return ( thisDate  )
}, simplify = "array" )
whole_year_built
whole_year_built <- vapply(housing_df$year_built, function(x){
thisDate <- paste0("1/1/",x)
return ( thisDate  )
}, character(1) )
whole_year_built
whole_year_built <- as.Date( whole_year_built, tryFormats=c("%m/%d/%Y") )
whole_year_built
class(whole_year_built)
housing_df$year_built <- whole_year_built
housing_df$year_built - housing_df$Sale.Date
(housing_df$year_built - housing_df$Sale.Date) / 365
round( (housing_df$year_built - housing_df$Sale.Date) / 365, 1)
round( (housing_df$year_built - housing_df$Sale.Date) / 365, 0)
round( (housing_df$Sale.Date - housing_df$year_built) / 365, 0)
round( (housing_df$year_built - housing_df$Sale.Date) / 365, 0)
round( ((housing_df$year_built - housing_df$Sale.Date) / 365)*-1, 0)
(housing_df$year_built - housing_df$Sale.Date)
year(housing_df$year_built)
housing_df$year_built
head(raw_housing_df)
housing_df$Sale.Date
format(as.Date(housing_df$Sale.Date, format="%Y/%m/%d"),"%Y")
sale_year <- format(as.Date(housing_df$Sale.Date, format="%Y/%m/%d"),"%Y")
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"present_use"))[,-1]
sale_year - housing_df$year_built
whole_year_built <- format(as.Date(housing_df$whole_year_built, format="%Y/%m/%d"),"%Y")
whole_year_built <- as.Date( whole_year_built, tryFormats=c("%m/%d/%Y") )
whole_year_built <- format(as.Date(housing_df$whole_year_built, format="%Y/%m/%d"),"%Y")
whole_year_built <- format(as.Date(whole_year_built, format="%Y/%m/%d"),"%Y")
(housing_df$year_built - housing_df$Sale.Date)
(housing_df$year_built)
(housing_df$year_built - sale_year)
sale_year
as.numeric(sale_year)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"present_use"))[,-1]
#### Combine the bathrooms
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df <- cbind(housing_df,bath_total)
whole_year_built <- as.numeric(housing_df$year_built)
sale_year <- as.numeric(sale_year)
whole_year_built - sale_year
sale_year - whole_year_built
year_built <- as.numeric(housing_df$year_built)
housing_df <- cbind(housing_df,sale_year)
housing_df <- cbind(housing_df,year_built)
housing_df
housing_df[ where(housing_df$sale_year > housing_df$year_built),]
housing_df[ which(housing_df$sale_year > housing_df$year_built),]
housing_df[ which(housing_df$sale_year < housing_df$year_built),]
raw_housing_df[,14]
raw_housing_df[14,]
raw_housing_df[136,]
