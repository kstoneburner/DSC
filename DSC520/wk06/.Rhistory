---
title: "DSC520 Week 02 Assignment"
author: "Kurt Stoneburner"
date: "6/11/2020"
output: pdf_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
library(ggplot2)
library(ggplot2)
library(pastecs)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(pastecs)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(pastecs)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(pastecs)
setwd("C:\\Users\\newcomb\\DSCProjects\\dsc520_github")
#setwd("L:\\stonk\\projects\\DSC\\dsc520")
survey_df <- read.csv("data/acs-14-1yr-s0201.csv")
head(survey_df)
str(survey_df)
nrow(survey_df)
ncol(survey_df)
#setwd("C:\\Users\\newcomb\\DSCProjects\\dsc520_github")
#setwd("L:\\stonk\\projects\\DSC\\dsc520")
#readDir <- "C:\\Users\\newcomb\\DSCProjects\\dsc520_github"
readDir <- "L:\\stonk\\projects\\DSC\\dsc520"
library(ggplot2)
library(pastecs)
#setwd("C:\\Users\\newcomb\\DSCProjects\\dsc520_github")
#setwd("L:\\stonk\\projects\\DSC\\dsc520")
#readDir <- "C:\\Users\\newcomb\\DSCProjects\\dsc520_github"
readDir <- "L:\\stonk\\projects\\DSC\\dsc520"
survey_df <- read.csv(readDir + "data/acs-14-1yr-s0201.csv")
survey_df <- read.csv(readDir , "data/acs-14-1yr-s0201.csv")
#setwd("C:\\Users\\newcomb\\DSCProjects\\dsc520_github")
#setwd("L:\\stonk\\projects\\DSC\\dsc520")
readDir <- "C:\\Users\\newcomb\\DSCProjects\\dsc520_github"
survey_df <- read.csv(readDir , "data/acs-14-1yr-s0201.csv")
#setwd("C:\\Users\\newcomb\\DSCProjects\\dsc520_github")
#setwd("L:\\stonk\\projects\\DSC\\dsc520")
readDir <- "C:/Users/newcomb/DSCProjects/dsc520_github"
survey_df <- read.csv(readDir , "data/acs-14-1yr-s0201.csv")
#setwd("C:\\Users\\newcomb\\DSCProjects\\dsc520_github")
#setwd("L:\\stonk\\projects\\DSC\\dsc520")
readDir <- "C:\\Users\\newcomb\\DSCProjects\\dsc520_github"
survey_df <- read.csv(readDir , "data\\acs-14-1yr-s0201.csv")
survey_df <- read.csv(paste(readDir , "data\\acs-14-1yr-s0201.csv"))
#setwd("C:\\Users\\newcomb\\DSCProjects\\dsc520_github")
#setwd("L:\\stonk\\projects\\DSC\\dsc520")
readDir <- "C:\\Users\\newcomb\\DSCProjects\\dsc520_github\\"
survey_df <- read.csv(paste(readDir , "data\\acs-14-1yr-s0201.csv"))
#setwd("C:\\Users\\newcomb\\DSCProjects\\dsc520_github")
#setwd("L:\\stonk\\projects\\DSC\\dsc520")
readDir <- "C:\\Users\\newcomb\\DSCProjects\\dsc520_github"
survey_df <- read.csv(paste(readDir,"\\data\\acs-14-1yr-s0201.csv"))
survey_df <- read.csv(paste(readDir,"\\data\\acs-14-1yr-s0201.csv",sep=""))
library(ggplot2)
library(pastecs)
readDir <- "C:\\Users\\newcomb\\DSCProjects\\dsc520_github"
survey_df <- read.csv(paste(readDir,"\\data\\acs-14-1yr-s0201.csv",sep=""))
head(survey_df)
str(survey_df)
str(survey_df)
nrow(survey_df)
nrow(survey_df)
ncol(survey_df)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(pastecs)
readDir <- "C:\\Users\\newcomb\\DSCProjects\\dsc520_github"
#readDir <- "L:\\stonk\\projects\\DSC\\dsc520"
survey_df <- read.csv(paste(readDir,"\\data\\acs-14-1yr-s0201.csv",sep=""))
head(survey_df)
str(survey_df)
nrow(survey_df)
ncol(survey_df)
summary(cars)
plot(pressure)
install.packages("knitr")
?kable
## Create a dataframe called characters_df using the following information from LOTR
name <- c("Aragon", "Bilbo", "Frodo", "Galadriel", "Sam", "Gandalf", "Legolas", "Sauron", "Gollum")
race <- c("Men", "Hobbit", "Hobbit", "Elf", "Hobbit", "Maia", "Elf", "Maia", "Hobbit")
in_fellowship <- c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE)
ring_bearer <- c(FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE)
age <- c(88, 129, 51, 7000, 36, 2019, 2931, 7052, 589)
characters_df <- data.frame(name, race, in_fellowship, ring_bearer, age)
kable(characters_df,"latex", caption = "One Ring to Rule Them All")
library(knitr)
## Create a dataframe called characters_df using the following information from LOTR
name <- c("Aragon", "Bilbo", "Frodo", "Galadriel", "Sam", "Gandalf", "Legolas", "Sauron", "Gollum")
race <- c("Men", "Hobbit", "Hobbit", "Elf", "Hobbit", "Maia", "Elf", "Maia", "Hobbit")
in_fellowship <- c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE)
ring_bearer <- c(FALSE, TRUE, TRUE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE)
age <- c(88, 129, 51, 7000, 36, 2019, 2931, 7052, 589)
characters_df <- data.frame(name, race, in_fellowship, ring_bearer, age)
kable(characters_df,"latex", caption = "One Ring to Rule Them All")
hopkins_us_confirmed_path <- paste(covidRootPath,"time_series_covid19_confirmed_US.csv",sep="")
hopkinsPath <- "C:\\Users\\newcomb\\DSCProjects\\COVID-19\\csse_covid_19_data\\csse_covid_19_time_series"
hopkins_us_confirmed_path <- paste(covidRootPath,"time_series_covid19_confirmed_US.csv",sep="")
hopkinsPath <- "C:\\Users\\newcomb\\DSCProjects\\COVID-19\\csse_covid_19_data\\csse_covid_19_time_series"
hopkins_us_confirmed_path <- paste(hopkinsPath,"time_series_covid19_confirmed_US.csv",sep="")
hopkins_us_confirmed <- read.csv(hopkins_us_confirmed_path)
hopkinsPath <- "C:\\Users\\newcomb\\DSCProjects\\COVID-19\\csse_covid_19_data\\csse_covid_19_time_series\\"
hopkins_us_confirmed_path <- paste(hopkinsPath,"time_series_covid19_confirmed_US.csv",sep="")
hopkins_us_confirmed <- read.csv(hopkins_us_confirmed_path)
hopkins_us_confirmed
head(hopkins_us_confirmed)
### Get a list of the states
hopkins_states <- unique(hopkins_us_confirmed$Province_State)
hopkins_states
hopkins_confirmed_condensed <- data.frame()
### Get a list of the states
hopkins_states <- unique(hopkins_us_confirmed$Province_State)
hopkins_states
hopkins_confirmed_condensed <- data.frame()
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
### Looping through each column
### Unlist converts data_frame list to vector
thisColumn <- unlist(hopkins_us_confirmed[stateCount])
head(thisColumn)
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
print(stateCount)
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
print(stateCount)
### Looping through each column
### Unlist converts data_frame list to vector
thisColumn <- unlist(hopkins_us_confirmed[stateCount])
head(thisColumn)
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisColName <- hopkins_states[stateCount]
print(thisColName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisColName <- hopkins_states[stateCount]
print(thisColName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
hopkins_us_confirmed[thisColName]
class(hopkins_us_confirmed[thisColName])
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Get a list of the states
hopkins_states <- unique(hopkins_us_confirmed$Province_State)
hopkins_states
hopkins_confirmed_condensed <- data.frame()
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisStateName <- hopkins_states[stateCount]
print(thisStateName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
temp_Row <- hopkins_us_confirmed[ ,which( hopkins_us_confirmed$Province_State==thisStateName ) ]
head(temp_row)
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisStateName <- hopkins_states[stateCount]
print(thisStateName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
temp_row <- hopkins_us_confirmed[ ,which( hopkins_us_confirmed$Province_State==thisStateName ) ]
head(temp_row)
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisStateName <- hopkins_states[stateCount]
print(thisStateName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
temp_row <- hopkins_us_confirmed[ which( hopkins_us_confirmed$Province_State==thisStateName, ) ]
head(temp_row)
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisStateName <- hopkins_states[stateCount]
print(thisStateName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
temp_row <- hopkins_us_confirmed[ which( hopkins_us_confirmed$Province_State==thisStateName, ) ]
temp_row
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisStateName <- hopkins_states[stateCount]
print(thisStateName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
print(hopkins_us_confirmed[ which( hopkins_us_confirmed$Province_State==thisStateName, ) ])
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
### Sum county values into state Values
### Loop through states
for (stateCount in 1:length(hopkins_states)){
thisStateName <- hopkins_states[stateCount]
print(thisStateName)
### Looping through each column
### Unlist converts data_frame list to vector
#thisColumn <- unlist(hopkins_us_confirmed[stateCount])
print(hopkins_us_confirmed[ which( ,hopkins_us_confirmed$Province_State==thisStateName ) ])
### Sapply returns a vector. The function returns 0 if NA, else returns existing value
#new_column <- sapply(thisColumn, function(x){
#  if (is.na(x) ) {
#    return(0)
#  } else { return(x) }
#},simplify="array")
#hopkins_us_confirmed[stateCount] <- new_column
}###///
# Assignment: 6.1 - Housing Data
# Name: Stoneburner, Kurt
# Date: 2020-07-06
removeColsFromDF <- function(input_df, removeCols){
###########################################################################
### Remove Columns from a a data frame the Hard Way!
### I don't like the clever answers from the Internet that I don't quite
### Understand.
###########################################################################
### Purpose: Return a data frame without the columns listed in removeCols
###########################################################################
### Variables #############################################################
###########################################################################
### input_df: Data Frame that needs columns removed
### removeCols: Vector of columns names as strings to be removed:
###             Example: c("date","Location","col1","col2")
###########################################################################
### Build a new vector of names by excluding values in removeCols
newColNames <- lapply(colnames(input_df), function(x){
if ( (x %in% removeCols) == FALSE) {return(x)}
})
### Initialize output data frame with the first column from input.
### This allows us to cbind in the loop. The first column will be
### removed later
output_df = data.frame(input_df[1])
### Build output data frame by adding in columns from newColNames
### For each new column name
for (i in 1:length(newColNames)){
########################################################################################
### Build column name
########################################################################################
### Not exactly sure why I need to unlist.
### probably should use a different function from lapply. Maybe capply? But this works
########################################################################################
thisColName <- unlist(newColNames[i])
output_df <- cbind(output_df,input_df[thisColName])
}### END Each New Column Name
return(output_df)
}### END RemoveColsFromDF
setwd("C:\\Users\\newcomb\\DSCProjects\\DSC\\DSC520\\wk06")
## Load the housing data
raw_housing_df <- read.csv("week-7-housing.csv")
housing_df <- removeColsFromDF(raw_housing_df,c("lon","lat","addr_full","ctyname","postalctyn","prop_type"))
head(housing_df)
unique(raw_housing_df$sitetype)
unique(raw_housing_df$current_zoning)
unique(raw_housing_df$year_renovated)
unique(raw_housing_df$sale_reason)
unique(raw_housing_df$building_grade)
unique(raw_housing_df$present_use)
unique(raw_housing_df$sale_warning)
unique(raw_housing_df$sale_instrument)
unique(raw_housing_df$present_use)
hist(raw_housing_df$present_use)
unique(raw_housing_df$present_use)
present_use_count <- vapply(unique(raw_housing_df$present_use), function(x){
thisUseVector <- raw_housing_df [ which(raw_housing_df$present_use == x),]
print(nrow(thisUseVector))
return(nrow(thisUseVector))},numeric(1))
present_use_count
nrow(raw_housing_df)
nrow(raw_housing_df) / 11931
11931 / nrow(raw_housing_df)
unique(raw_housing_df$current_zoning)
length(unique(raw_housing_df$year_renovated))
length(unique(raw_housing_df$current_zoning))
current_zoning_count <- vapply(unique(raw_housing_df$current_zoning), function(x){
thisUseVector <- raw_housing_df [ which(raw_housing_df$current_zoning == x),]
return(nrow(thisUseVector))},numeric(1))
current_zoning_count
hist(raw_housing_df$current_zoning)
coded_zoning <- raw_housing_df$current_zoning
zone_base_vector <- c(1:length(unique(raw_housing_df$current_zoning)))
zone_base_vector
## Convert current_zoning into a numeric value.
## Build a number vector based on the unique values in current_zoning
zoning_zones <- unique(raw_housing_df$current_zoning)
coded_zoning <- vapply(raw_housing_df$current_zoning, function(x){
print(x)
return(0)},numeric(1))
coded_zoning <- vapply(raw_housing_df$current_zoning, function(x){
print(zoning_zones[x])
return(0)},numeric(1))
coded_zoning <- vapply(raw_housing_df$current_zoning, function(x){
coded_zoning <- vapply(raw_housing_df$current_zoning, function(x){
print(match(x,zoning_zones))
return(0)},numeric(1))
coded_zoning <- vapply(raw_housing_df$current_zoning, function(x){
print(match(x,zoning_zones))
return(0)},numeric(1))
hist(raw_housing_df$current_zoning)
coded_zoning <- vapply(raw_housing_df$current_zoning, function(x){
print(match(x,zoning_zones))
return(0)},numeric(1))
hist(coded_zoning)
coded_zoning
coded_zoning <- vapply(raw_housing_df$current_zoning, function(x){
thisIndex <- match(x,zoning_zones)
print(class(thisIndex))
return()},numeric(1))
coded_zoning <- vapply(raw_housing_df$current_zoning, function(x){
thisIndex <- match(x,zoning_zones)
print(class(thisIndex))
return(thisIndex)},numeric(1))
coded_zoning
hist(coded_zoning)
coded_zoning <- vapply(raw_housing_df$current_zoning, function(x){
thisIndex <- match(x,zoning_zones)
return(thisIndex)},numeric(1))
coded_zoning
hist(coded_zoning)
cor(coded_zoning,raw_housing_df$current_zoning)
cor(coded_zoning,raw_housing_df$present_use)
cov(coded_zoning,raw_housing_df$present_use)
his(raw_housing_df$present_use)
hist(raw_housing_df$present_use)
