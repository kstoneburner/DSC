housing_df <- cbind(housing_df,bath_total)
##########################################################################################################
#### Build house_age. This is the age of the house at Sale.
##########################################################################################################
#### Get Year build and coerce into a number
year_built <- as.numeric(raw_housing_df$year_built)
#### Coerce the Date into a Date value and return just the year
sale_year <- format(as.Date(raw_housing_df$Sale.Date, format="%m/%d/%Y"),"%Y")
#### Convert Date (year) into Date (number)
sale_year <- as.numeric(sale_year)
#### The difference between the sale_year and year_built. Is the dwellings age.
house_age <- (sale_year - year_built)
################################################################################################################################
#### There are negative number in house_age. Some sale_dates are listing as sold before the date of building.
#### I'm going to assume this is a data entry issue. Although there could be an issue where houses were actually sold before
#### they were built. A sampling of the sale dates all reference 2006, with multi-year differences in some cases.
#### I'm treating this as a data entry issue and converting all negative house_age values to 0.
################################################################################################################################
house_age <- vapply(house_age, function(x){
if (x < 0 ) { return(0)}
return(x)
},numeric(1))
housing_df <- cbind(housing_df,house_age)
summary(housing_df)
### b.
### base_lm: Predicts Sale Price based on lot lot size
salePrice_base_lm <-  lm(Sale.Price ~ sq_ft_lot, data=housing_df)
raw_housing_df$Sale.Price
sum(raw_housing_df$Sale.Price)
sum(salePrice_house_age_lm$model$Sale.Price)
computeCI(salePrice_house_age_lm$model)
computeCI(salePrice_house_age_lm$model)
t.test(salePrice_house_age_lm$model)
salePrice_house_age_lm$model
summary(salePrice_house_age_lm)
lm.beta(salePrice_house_age_lm)
lm.beta(salePrice_house_age_lm)
setwd("C:\\Users\\newcomb\\DSCProjects\\DSC\\DSC520\\wk06")
library(QuantPsyc)
library(readxl)
removeColsFromDF <- function(input_df, removeCols){
###########################################################################
### Remove Columns from a a data frame the Hard Way!
### I don't like the clever answers from the Internet that I don't quite
### Understand.
###########################################################################
### Purpose: Return a data frame without the columns listed in removeCols
###########################################################################
### Variables #############################################################
###########################################################################
### input_df: Data Frame that needs columns removed
### removeCols: Vector of columns names as strings to be removed:
###             Example: c("date","Location","col1","col2")
###########################################################################
### Build a new vector of names by excluding values in removeCols
newColNames <- lapply(colnames(input_df), function(x){
if ( (x %in% removeCols) == FALSE) {return(x)}
})
### Initialize output data frame with the first column from input.
### This allows us to cbind in the loop. The first column will be
### removed later
output_df = data.frame(input_df[1])
### Build output data frame by adding in columns from newColNames
### For each new column name
for (i in 1:length(newColNames)){
########################################################################################
### Build column name
########################################################################################
### Not exactly sure why I need to unlist.
### probably should use a different function from lapply. Maybe capply? But this works
########################################################################################
thisColName <- unlist(newColNames[i])
### Replace blank spaces with periods
#thisColName <- gsub(" ",".",thisColName)
#?gsub
output_df <- cbind(output_df, input_df[thisColName])
}### END Each New Column Name
return(output_df)
}### END RemoveColsFromDF
computeCI <- function(input_data){
##############################################
#### Compute Confidence Intervals
##############################################
#### The best way to learn it is to do it!
#### Calculation confirmed with t.test()
##############################################
# Calculate Standard Error in R
# Standard Deviation divided by the sqrt of the sample size
# using the sd (input_data) / sqrt(length(input_data))
### Determine standard error
se <- sd(input_data) / sqrt(length(input_data))
thisMean <- mean(input_data)
##############################################################################
### The boundaries are a function of the standard error and 95% of zScores lie
### between -1.96 and 1.96
##############################################################################
lowerBoundary <- thisMean - (1.96 * se)
upperBoundary <- thisMean + (1.96 * se)
return (data.frame(
lowerBoundary = lowerBoundary,
mean = thisMean,
upperBoundary = upperBoundary,
lowerValue = (thisMean - lowerBoundary),
upperValue = (thisMean + upperBoundary)
))
}
## Load the housing data
#raw_housing_df <- read.csv("week-7-housing.csv")
raw_housing_df <- read_excel("week-6-housing.xlsx")
head(raw_housing_df)
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"present_use"))[,-1]
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"sitetype",
"sale_warning",
"present_use",
"sale_reason",
"sale_instrument",
"Sale.Date"))[,-1]
#####################################################
### Convert spaces to periods in column names
#####################################################
thisNames <- colnames(housing_df)
colnames(housing_df) <- gsub(" ",".",thisNames)
thisNames <- colnames(raw_housing_df)
colnames(raw_housing_df) <- gsub(" ",".",thisNames)
head(raw_housing_df)
#### Combine the bathrooms
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df <- cbind(housing_df,bath_total)
##########################################################################################################
#### Build house_age. This is the age of the house at Sale.
##########################################################################################################
#### Get Year build and coerce into a number
year_built <- as.numeric(raw_housing_df$year_built)
#### Coerce the Date into a Date value and return just the year
sale_year <- format(as.Date(raw_housing_df$Sale.Date, format="%m/%d/%Y"),"%Y")
#### Convert Date (year) into Date (number)
sale_year <- as.numeric(sale_year)
#### The difference between the sale_year and year_built. Is the dwellings age.
house_age <- (sale_year - year_built)
################################################################################################################################
#### There are negative number in house_age. Some sale_dates are listing as sold before the date of building.
#### I'm going to assume this is a data entry issue. Although there could be an issue where houses were actually sold before
#### they were built. A sampling of the sale dates all reference 2006, with multi-year differences in some cases.
#### I'm treating this as a data entry issue and converting all negative house_age values to 0.
################################################################################################################################
house_age <- vapply(house_age, function(x){
if (x < 0 ) { return(0)}
return(x)
},numeric(1))
housing_df <- cbind(housing_df,house_age)
summary(housing_df)
### b.
### base_lm: Predicts Sale Price based on lot lot size
salePrice_base_lm <-  lm(Sale.Price ~ sq_ft_lot, data=housing_df)
summary(salePrice_base_lm)
salePrice_living_lm <- lm(Sale.Price ~ square_feet_total_living, data=housing_df)
summary(salePrice_living_lm)
salePrice_naieve_lm <-  lm(Sale.Price ~ zip5 + bedrooms + bath_total + square_feet_total_living, data=housing_df)
summary(salePrice_naieve_lm)
salePrice_house_age_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bedrooms + bath_total + house_age, data=housing_df)
summary(salePrice_house_age_lm)
salePrice_year_built_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade + bedrooms + bath_total + year_built, data=housing_df)
summary(salePrice_year_built_lm)
lm.beta(salePrice_house_age_lm)
lm.beta(salePrice_year_built_lm)
summary(salePrice_house_age_lm)
quantile(housing_df$building_grade, probs = .01)
salePrice_living_lm <- lm(Sale.Price ~ square_feet_total_living, data=housing_df)
quantile(housing_df$building_grade, probs = .01)
quantile(housing_df$building_grade, probs = .5)
quantile(housing_df$building_grade, probs = .95)
quantile(housing_df$building_grade, probs = .99)
quantile(housing_df$building_grade, probs = .999)
#anova(salePrice_base_lm,square_feet_total_living)
anova(salePrice_base_lm,salePrice_house_age_lm)
t.test(housing_df$square_feet_total_living)
#anova(salePrice_base_lm,square_feet_total_living)
anova(salePrice_base_lm,salePrice_house_age_lm)
anova(salePrice_base_lm,salePrice_year_built_lm)
salePrice_improved_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade  + house_age, data=housing_df)
anova(saleprice_base_lm,salePrice_improved_lm)
salePrice_improved_lm <-    lm(Sale.Price ~ square_feet_total_living + building_grade  + house_age, data=housing_df)
anova(saleprice_base_lm,salePrice_improved_lm)
anova(salePrice_base_lm,salePrice_improved_lm)
anova(salePrice_base_lm,salePrice_naieve_lm)
anova(salePrice_base_lm,salePrice_house_age_lm,salePrice_year_built_lm)
anova(salePrice_base_lm,salePrice_year_built_lm,salePrice_house_age_lm)
casewise_df <- housing_df
casewise_df <- housing_df
casewise_df$cooks.distance <- cooks.distance(salePrice_house_age_lm)
casewise_dfl$leverage <- hatvalues(salePrice_house_age_lm)
casewise_df$covariance.ratios <- covratio(salePrice_house_age_lm)
casewise_df
### p292
### I think this is out casewise diagnostic
### Look for Large residuals. any Value greater than two should be flagged as an outlier
large_residuals <- rstandard(salePrice_house_age_lm) > 2 | rstandard(salePrice_house_age_lm) < -2
### Get a count of Large residuals
sum(large_residuals)
### Check for outliers
sum( salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("cooks.distance") ] > 1 )
salePrice_house_age_lm$model[salePrice_base_lm$model$large_residuals, c("cooks.distance","leverage","covariance.ratios")]
### Get a count of Large residuals
sum(large_residuals)
rstandard(salePrice_house_age_lm)
sum(rstandard(salePrice_house_age_lm))
large_residuals <- rstandard(salePrice_house_age_lm)
llarge_residuals <- rstandard(salePrice_house_age_lm) > 2 | rstandard(salePrice_house_age_lm) < -2
large_residuals <- rstandard(salePrice_house_age_lm) > 2 | rstandard(salePrice_house_age_lm) < -2
large_residuals
salePrice_house_age_lm[large_residuals,]
salePrice_house_age_lm[large_residuals]
casewise_df[large_residuals]
casewise_df[large_residuals,]
sum casewise_df[large_residuals,]
housing_df[large_residuals,]
large_residuals_df <- housing_df[large_residuals,]
large_residuals_df
?rstandard
large_residuals_df <- housing_df[large_residuals,c("Sale.Date","Sale.Price","building_grade","square_feet_total_living","bedrooms","bath_total","house_age")]
large_residuals_df
computeCI(salePrice_house_age_lm$model$Sale.Price)
ci_df <- data.frame(computeCI(salePrice_house_age_lm$model$Sale.Price))
ci_df
ci_df <- data.frame(Sale.Price=computeCI(salePrice_house_age_lm$model$Sale.Price))
ci_df
saleCI <- computeCI(salePrice_house_age_lm$model$Sale.Price)
large_residuals_df
large_residuals_df[which(large_residuals_df$bedrooms < 1),]
large_residuals_df$Sale.Price[which(large_residuals_df$Sale.Price < saleCI$lowerValue),]
large_residuals_df$Sale.Price[which(large_residuals_df$Sale.Price < saleCI$lowerValue)]
large_residuals_df[which(large_residuals_df$Sale.Price < saleCI$lowerValue)]
large_residuals_df[which(large_residuals_df$Sale.Price < saleCI$lowerValue),]
large_residuals_df[which(large_residuals_df$Sale.Price < saleCI$lowerValue),]$Sale.Price
large_residuals_df[which(large_residuals_df$Sale.Price < saleCI$lowerValue),]
large_residuals_df[which(large_residuals_df$Sale.Price < saleCI$lowerValue) | which(large_residuals_df$Sale.Price < saleCI$upperValue),]
large_residuals_df[which(large_residuals_df$Sale.Price < saleCI$lowerValue),]
large_residuals_df[which(large_residuals_df$Sale.Price < saleCI$upperValue),]
saleCI$upperValue
large_residuals_df[which(large_residuals_df$Sale.Price > saleCI$upperValue),]
sum(large_residuals_df[which(large_residuals_df$Sale.Price > saleCI$upperValue),])
nrow(large_residuals_df[which(large_residuals_df$Sale.Price > saleCI$upperValue),])
knitr::opts_chunk$set(echo = TRUE)
### Set working Directory
setwd("C:\\Users\\newcomb\\DSCProjects\\DSC\\DSC520\\wk06")
#setwd("L:\\stonk\\projects\\DSC\\DSC\\DSC520\\wk06")
library(QuantPsyc)
removeColsFromDF <- function(input_df, removeCols){
###########################################################################
### Remove Columns from data frame the Hard Way!
## # I don't like the clever answers from the Internet that I don't quite
### Understand.
###########################################################################
### Purpose: Return a data frame without the columns listed in removeCols
###########################################################################
### Variables #############################################################
###########################################################################
### input_df: Data Frame that needs columns removed
### removeCols: Vector of columns names as strings to be removed:
###             Example: c("date","Location","col1","col2")
###########################################################################
### Build a new vector of names by excluding values in removeCols
newColNames <- lapply(colnames(input_df), function(x){
if ( (x %in% removeCols) == FALSE) {return(x)}
})
### Initialize output data frame with the first column from input.
### This allows us to cbind in the loop. The first column will be
### removed later
output_df = data.frame(input_df[1])
### Build output data frame by adding in columns from newColNames
### For each new column name
for (i in 1:length(newColNames)){
########################################################################################
### Build column name
########################################################################################
### Not exactly sure why I need to unlist.
### probably should use a different function from lapply. Maybe capply? But this works
########################################################################################
thisColName <- unlist(newColNames[i])
output_df <- cbind(output_df,input_df[thisColName])
}### END Each New Column Name
return(output_df)
}### END RemoveColsFromDF
computeCI <- function(input_data){
##############################################
#### Compute Confidence Intervals
##############################################
#### The best way to learn it is to do it!
#### Calculation confirmed with t.test()
##############################################
# Calculate Standard Error in R
# Standard Deviation divided by the sqrt of the sample size
# using the sd (input_data) / sqrt(length(input_data))
### Determine standard error
se <- sd(input_data) / sqrt(length(input_data))
thisMean <- mean(input_data)
##############################################################################
### The boundaries are a function of the standard error and 95% of zScores lie
### between -1.96 and 1.96
##############################################################################
lowerBoundary <- thisMean - (1.96 * se)
upperBoundary <- thisMean + (1.96 * se)
return (data.frame(
lowerBoundary = lowerBoundary,
mean = thisMean,
upperBoundary = upperBoundary,
lowerValue = (thisMean - lowerBoundary),
upperValue = (thisMean + upperBoundary)
))
}
## Load the housing data
## We'll keep the raw table for access to the unaltered data.
## This helps to keep housing_df (more) svelte (or svelter)
raw_housing_df <- read.csv("week-7-housing.csv")
housing_df <- removeColsFromDF(raw_housing_df,c("lon",
"lat",
"addr_full",
"ctyname",
"postalctyn",
"prop_type",
"year_renovated",
"current_zoning",
"bath_full_count",
"bath_half_count",
"bath_3qtr_count",
"sitetype",
"sale_warning",
"present_use",
"sale_reason",
"sale_instrument",
"Sale.Date"))[,-1]
#####################################################
### Convert spaces to periods in column names
#####################################################
thisNames <- colnames(housing_df)
colnames(housing_df) <- gsub(" ",".",thisNames)
thisNames <- colnames(raw_housing_df)
colnames(raw_housing_df) <- gsub(" ",".",thisNames)
#### Combine the bathrooms - using weighted values
bath_total <- raw_housing_df$bath_full_count + (raw_housing_df$bath_half_count *.5) + (raw_housing_df$bath_3qtr_count *.75)
housing_df <- cbind(housing_df,bath_total)
##########################################################################################################
#### Build house_age. This is the age of the house at Sale.
##########################################################################################################
#### Get Year build and coerce into a number
year_built <- as.numeric(raw_housing_df$year_built)
#### Coerce the Date into a Date value and return just the year
sale_year <- format(as.Date(raw_housing_df$Sale.Date, format="%m/%d/%Y"),"%Y")
#### Convert Date (year) into Date (number)
sale_year <- as.numeric(sale_year)
#### The difference between the sale_year and year_built. Is the dwellings age.
house_age <- (sale_year - year_built)
################################################################################################################################
#### There are negative number in house_age. Some sale_dates are listing as sold before the date of building.
#### I'm going to assume this is a data entry issue. Although there could be an issue where houses were actually sold before
#### they were built. A sampling of the sale dates all reference 2006, with multi-year differences in some cases.
#### I'm treating this as a data entry issue and converting all negative house_age values to 0.
################################################################################################################################
house_age <- vapply(house_age, function(x){
if (x < 0 ) { return(0)}
return(x)
},numeric(1))
housing_df <- cbind(housing_df,house_age)
large_residuals <- rstandard(salePrice_house_age_lm) > 2 | rstandard(salePrice_house_age_lm) < -2
#### i. Use the appropriate function to show the sum of large residuals.
There are 325 large residuals
``` {r large_residual_count, echo=TRUE}
sum(large_residuals)
```
casewise_df$covariance.ratios <- covratio(salePrice_house_age_lm)
sum(large_residuals)
sum(large_residuals)
``` {r large_residual_percent, echo=TRUE}
sum(large_residuals) / nrow(housing_df)
sum(large_residuals) / nrow(housing_df)
``` {r large_residual_percent, echo=TRUE}
large_residuals_df <- housing_df[large_residuals,c("Sale.Date","Sale.Price","building_grade","square_feet_total_living","bedrooms","bath_total","house_age")]
head(housing_df)
large_residuals_df <- housing_df[large_residuals,c("Sale.Price","building_grade","square_feet_total_living","bedrooms","bath_total","house_age")]
large_residuals_df
head(large_residuals_df)
large_residuals_df[
( which(large_residuals_df$Sale.Price < saleCI$lowerValue) | large_residuals_df$Sale.Price > saleCI$upperValue),
]
large_residuals_df[which(large_residuals_df$Sale.Price < saleCI$lowerValue),]
large_residuals_df[which(large_residuals_df$Sale.Price > saleCI$upperValue),]
nrow(large_residuals_df[which(large_residuals_df$Sale.Price < saleCI$lowerValue),])
nrow(large_residuals_df[which(large_residuals_df$Sale.Price > saleCI$upperValue),])
nrow(large_residuals_df[which(large_residuals_df$square_feet_total_living < sqft_CI$lowerValue),])
#We'll need these Later - for outliers
price_CI <- computeCI(salePrice_house_age_lm$model$Sale.Price)
sqft_CI <- computeCI(salePrice_house_age_lm$model$square_feet_total_living)
grade_CI <- computeCI(salePrice_house_age_lm$model$building_grade)
bath_CI <- computeCI(salePrice_house_age_lm$model$bath_total)
bedroom_CI <- computeCI(salePrice_house_age_lm$model$bedrooms)
age_CI <- computeCI(salePrice_house_age_lm$model$house_age)
nrow(large_residuals_df[which(large_residuals_df$square_feet_total_living < sqft_CI$lowerValue),])
nrow(large_residuals_df[which(large_residuals_df$square_feet_total_living > sqft_CI$upperValue),])
nrow(large_residuals_df[which(large_residuals_df$building_grade < grade_CI$lowerValue),])
nrow(large_residuals_df[which(large_residuals_df$building_grade > grade_CI$upperValue),])
nrow(large_residuals_df[which(large_residuals_df$building_grade < grade_CI$lowerValue),])
nrow(large_residuals_df[which(large_residuals_df$building_grade > grade_CI$upperValue),])
nrow(large_residuals_df[which(large_residuals_df$Sale.Price < saleCI$lowerValue),])
nrow(large_residuals_df[which(large_residuals_df$Sale.Price > saleCI$upperValue),])
nrow(large_residuals_df[which(large_residuals_df$square_feet_total_living < sqft_CI$lowerValue),])
nrow(large_residuals_df[which(large_residuals_df$square_feet_total_living > sqft_CI$upperValue),])
nrow(large_residuals_df[which(large_residuals_df$building_grade < grade_CI$lowerValue),])
nrow(large_residuals_df[which(large_residuals_df$building_grade > grade_CI$upperValue),])
nrow(large_residuals_df[which(large_residuals_df$bath_total < bath_CI$lowerValue),])
nrow(large_residuals_df[which(large_residuals_df$bath_total > bath_CI$upperValue),])
nrow(large_residuals_df[which(large_residuals_df$house_age < age_CI$lowerValue),])
nrow(large_residuals_df[which(large_residuals_df$house_age > age_CI$upperValue),])
mean(large_residuals_df[which(large_residuals_df$house_age < age_CI$lowerValue),])
large_residuals_df[which(large_residuals_df$house_age < age_CI$lowerValue),]
ggplot(data = last_month_df, aes(y = daily_total_confirmed, x = daily_total_deaths)) + geom_point(color='blue') +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
#  geom_line(color='blue'  ,data = june_CD_base_predict_df,      aes(y=daily_total_confirmed, x=daily_total_deaths)) +
geom_line(color='red'   ,data = last_month_predict_df, aes(y=daily_total_confirmed, x=daily_total_deaths)) +
xlab("Total Covid Deaths") + ylab("Total Confirmed Cases")
bed_count_low <- nrow(large_residuals_df[which(large_residuals_df$bedrooms < bedroom_CI$lowerValue),])
bed_count_high <- nrow(large_residuals_df[which(large_residuals_df$bedrooms > bedroom_CI$upperValue),])
sales_count_low <- nrow(large_residuals_df[which(large_residuals_df$Sale.Price < price_CI$lowerValue),])
```
sales_count_high <- nrow(large_residuals_df[which(large_residuals_df$Sale.Price > price_CI$upperValue),])
sqft_count_low <- nrow(large_residuals_df[which(large_residuals_df$square_feet_total_living < sqft_CI$lowerValue),])
sqft_count_high <- nrow(large_residuals_df[which(large_residuals_df$square_feet_total_living > sqft_CI$upperValue),])
bg_count_low <- nrow(large_residuals_df[which(large_residuals_df$building_grade < grade_CI$lowerValue),])
bg_count_high <- nrow(large_residuals_df[which(large_residuals_df$building_grade > grade_CI$upperValue),])
bath_count_low <- nrow(large_residuals_df[which(large_residuals_df$bath_total < bath_CI$lowerValue),])
bath_count_high <- nrow(large_residuals_df[which(large_residuals_df$bath_total > bath_CI$upperValue),])
bed_count_low <- nrow(large_residuals_df[which(large_residuals_df$bedrooms < bedroom_CI$lowerValue),])
bed_count_high <- nrow(large_residuals_df[which(large_residuals_df$bedrooms > bedroom_CI$upperValue),])
age_count_low <- nrow(large_residuals_df[which(large_residuals_df$house_age < age_CI$lowerValue),])
age_count_high <- nrow(large_residuals_df[which(large_residuals_df$house_age > age_CI$upperValue),])
large_residuals_df <- housing_df[large_residuals,c("Sale.Price","building_grade","square_feet_total_living","bedrooms","bath_total","house_age")]
large_residuals_df
sales_count_low <- nrow(large_residuals_df[which(large_residuals_df$Sale.Price < price_CI$lowerValue),])
sales_count_high <- nrow(large_residuals_df[which(large_residuals_df$Sale.Price > price_CI$upperValue),])
sqft_count_low <- nrow(large_residuals_df[which(large_residuals_df$square_feet_total_living < sqft_CI$lowerValue),])
sqft_count_high <- nrow(large_residuals_df[which(large_residuals_df$square_feet_total_living > sqft_CI$upperValue),])
bg_count_low <- nrow(large_residuals_df[which(large_residuals_df$building_grade < grade_CI$lowerValue),])
bg_count_high <- nrow(large_residuals_df[which(large_residuals_df$building_grade > grade_CI$upperValue),])
bath_count_low <- nrow(large_residuals_df[which(large_residuals_df$bath_total < bath_CI$lowerValue),])
bath_count_high <- nrow(large_residuals_df[which(large_residuals_df$bath_total > bath_CI$upperValue),])
bed_count_low <- nrow(large_residuals_df[which(large_residuals_df$bedrooms < bedroom_CI$lowerValue),])
bed_count_high <- nrow(large_residuals_df[which(large_residuals_df$bedrooms > bedroom_CI$upperValue),])
age_count_low <- nrow(large_residuals_df[which(large_residuals_df$house_age < age_CI$lowerValue),])
age_count_high <- nrow(large_residuals_df[which(large_residuals_df$house_age > age_CI$upperValue),])
print(paste0("Sales.Price - ",(sales_count_low + sales_count_high), " Total outliers"))
print(paste0("              ", sales_count_low, " contain values less than ",saleCI$lowerValue ))
#print(paste0("Sales.Price - ",sales_count_low, " Total outliers"))
print(paste0("              ", sales_count_low, " contain values less than ",saleCI$lowerValue ))
print(paste0("              ", sales_count_low, " contain values less than ",round( price_CI$lowerValue,2 ))
print(paste0("              ", sales_count_low, " contain values less than ",round( price_CI$lowerValue ),2)
print(paste0("              ", sales_count_low, " contain values less than ",round(price_CI$lowerValue,2) ) )
print(paste0("              ", sales_count_low, " contain values less than ",round(price_CI$lowerValue,0) ) )
print(paste0("Building Grade - ",(bg_count_low + bg_count_high), " Total outliers"))
print(paste0("              ", bg_count_low, " contain values less than ",round(grade_CI$lowerValue,0) ) )
print(paste0("              ", bg_count_high, " contain values more than ",round(grade_CI$upperValue,0) ) )
print(paste0("              ", sales_count_low, " contain values less than ",round(price_CI$lowerValue,0) ) )
large_residuals_df[which(large_residuals_df$house_age < age_CI$lowerValue),]
print(paste0("              ", sales_count_low, " contain values less than ",round(price_CI$lowerValue,0) ) )
large_residuals_df[which(large_residuals_df$house_age < age_CI$lowerValue),]
print(paste0("Sales.Price - ",(sales_count_low + sales_count_high), " Total outliers"))
print(paste0("              ", sales_count_low, " contain values less than ",saleCI$lowerValue ))
print(paste0("              ", sales_count_low, " contain values less than ",round(price_CI$lowerValue,0) ) )
print(paste0("Sales.Price - ",(sales_count_low + sales_count_high), " Total outliers"))
print(paste0("              ", sales_count_low, " contain values less than ",round(price_CI$lowerValue,0) ) )
print(paste0("              ", sales_count_high, " contain values more than ",round(price_CI$upperValue,0) ) )
print(paste0("Building Grade - ",(bg_count_low + bg_count_high), " Total outliers"))
print(paste0("Square Foot Living - ",(sqft_count_low + sqft_count_high), " Total outliers"))
print(paste0("              ", sqft_count_low, " contain values less than ",round(sqft_CI$lowerValue,0) ) )
print(paste0("              ", sqft_count_high, " contain values more than ",round(sqft_CI$upperValue,0) ) )
print(paste0("Bedrooms - ",(bed_count_low + bed_count_high), " Total outliers"))
print(paste0("              ", bed_count_low, " contain values less than ",round(bedroom_CI$lowerValue,0) ) )
print(paste0("              ", bed_count_high, " contain values more than ",round(bedroom_CI$upperValue,0) ) )
print(paste0("Bedrooms - ",(bed_count_low + bed_count_high), " Total outliers"))
print(paste0("              ", bed_count_low, " contain values less than ",round(bedroom_CI$lowerValue,2) ) )
print(paste0("              ", bed_count_high, " contain values more than ",round(bedroom_CI$upperValue,0) ) )
print(paste0("Bathrooms - ",(bath_count_low + bath_count_high), " Total outliers"))
print(paste0("              ", bath_count_low, " contain values less than ",round(bath_total$lowerValue,0) ) )
print(paste0("              ", bath_count_low, " contain values less than ",round(bath_total$lowerValue,0) ) )
print(paste0("              ", bath_count_high, " contain values more than ",round(bath_total$upperValue,0) ) )
print(paste0("Bathrooms - ",(bath_count_low + bath_count_high), " Total outliers"))
print(paste0("              ", bath_count_low, " contain values less than ",round(bath_CI$lowerValue,0) ) )
print(paste0("              ", bath_count_low, " contain values less than ",round(bath_CI$lowerValue,2) ) )
print(paste0("              ", bath_count_high, " contain values more than ",round(bath_CI$upperValue,0) ) )
print(paste0("House Age - ",(age_count_low + age_count_high), " Total outliers"))
print(paste0("              ", age_count_low, " contain values less than ",round(age_CI$lowerValue,2) ) )
print(paste0("              ", age_count_high, " contain values more than ",round(age_CI$upperValue,0) ) )
